---
title:  Developing C++ Programs on Windows
---

GemFire uses the Visual Studio 2010 Service Pack 1 compiler for C++ programs on Windows, which invokes Microsoft<sup>Â®</sup> `cl.exe` from the command line at compile time.

The GemFire native client supports .NET 4.0 and Visual Studio 2010. For advantages and more information on the features of .NET 4.0 and Visual Studio 2010 SP1, see [http://msdn.microsoft.com/en-us/library/dd831853(v=vs.100).aspx](http://msdn.microsoft.com/en-us/library/dd831853(v=vs.100).aspx) and [http://msdn.microsoft.com/en-us/library/vstudio/w0x726c2(v=vs.100).aspx](http://msdn.microsoft.com/en-us/library/vstudio/w0x726c2(v=vs.100).aspx).

Visual Studio 2010 SP1 is the recommended compiler. If you are using any other compiler, contact technical support for assistance.

**Note:** When compiling external projects or applications that are used or referenced by the native client, make sure that you compile them for the same target architecture as your native client installation. For example, if you installed the 32-bit (x86) version of the native client, compile your external projects for 32-bit (x86) architecture.

<a id="developing-windows__section_6BFD4982A7144301A03F948CFF953AFD"></a>
## Step 1. Installer Sets Up Environment Variables

When you install on Windows, the installer performs these tasks:

-   Sets the *GFCPP* environment variable to *&lt;productDir&gt;*, where *&lt;productDir&gt;* is the path to the native client product directory.
-   Adds the *%GFCPP%\\bin* executable directory to the Windows *PATH*.

<a id="developing-windows__section_0BF2BE9A38BC40D1B9FAD2AC8DBFAB0E"></a>

## Step 2. Choose 32-bit or 64-bit Command-line Prompt

For 32-bit:

Start &gt; Programs &gt; Microsoft Visual Studio &gt; 2010 &gt; Visual Studio Tools &gt; Visual Studio 2010 Command Prompt

For 64-bit:

Start &gt; Programs &gt; Microsoft Visual Studio 2010 &gt; Visual Studio Tools &gt; Visual Studio 2010 x64 Win64 Command Prompt

To build using the Microsoft Visual Studio Interface, from the Solutions Platform, choose **Win32** or **x86** from the Build menu for 32-bit builds or x64 for a 64-bit build.

<a id="developing-windows__section_597B20DBE5FD4F66A6BCB2A09C04C9C9"></a>

## Step 3. Compile C++ Clients and Dynamically Link Them to Native Client Library

The following table lists the compiler and linker switches that must be present on the `cl.exe` command line.

**Note:**
If you want to use the Visual Studio user interface instead of invoking `cl.exe` from the command line, be sure to supply these parameters.

<a id="developing-windows__table_1FE5C01E91424CE9906CA1D0210B1237"></a>

| Argument                          | Explanation                                                                                                           |
|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------|
| `/MD`                             | Memory model.                                                                                                         |
| `/EHsc`                           | Catches C++ exceptions only and tells the compiler to assume that \*extern\* C functions never throw a C++ exception. |
| `/GR`                             | Runtime type information.                                                                                             |
| `-I%GFCPP%\include`               | Specifies the GemFire `include` directory.                                               |
| `%GFCPP%\lib\gfcppcache.lib`      | Specifies the library file for the shared library.                                                                    |
| `/D_CRT_SECURE_NO_DEPRECATE`      | Suppresses warnings. Required for Visual Studio 2010.                                                                 |
| `/D_CRT_NON_CONFORMING_SWPRINTFS` | Suppresses warnings. Required for Visual Studio 2010.                                                                 |

: <span class="tablecap">Table 1. Compiler and Linker Switches for Windows</span>

<a id="developing-windows__section_B66588EC7C6F4D9BA772406CFD5F3EAE"></a>

## Step 4. Verify that You Can Load the Native Client Library

Because GemFire does not provide a library that can be linked statically into an application on Windows, you must dynamically link to the native client library.

To make the native client library available for loading, verify that the directory `productDir/bin` is included in the *PATH* environment variable, where *productDir* is the path to the GemFire product directory.
