---
title:  Native Client User's Guide
---

This Native Client User's Guide provides step-by-step procedures for installation, configuration, and development of native clients.

<a id="concept_95BBEBEF16B2481BA1850C0A5C893607__section_0D0A91D84CA44446A3973F1AE4CD3ABA"></a>
## Intended Audience

This guide is intended for anyone who wants to use a native client, including C++ and .NET developers programming their applications to use <span class="keyword">GemFire</span>. This guide assumes experience developing with C++ and .NET.

-   **[Getting Started with a Native Client](../nativeclient/introduction/native-client-intro.html)**

    This section gives you a conceptual overview of the native client. It shows you how to install the product, build native client applications on various platforms, and run the product examples.

-   **[Setting System Properties](../nativeclient/setting-properties/chapter-overview.html)**

    *Setting System Properties* describes how to configure <span class="keyword">Pivotal GemFire</span> native clients and cache servers to participate in a distributed system.

-   **[Configuring the Native Client Cache](../latest/nativeclient/client-cache/chapter-overview.html)**

    *Configuring the Native Client Cache* describes the native client cache functionality, initialization file, and APIs. It provides information about creating and working with caches, cache regions, and region entries.

-   **[Pivotal GemFire Native Client C++ API](../latest/nativeclient/cpp-caching-api/cpp-caching-api.html)**

    This sectiondescribes the primary classes, and usage conventions for the native client C++ API. It demonstrates how to use the API to create caches and perform data serialization.

-   **[Pivotal GemFire Native Client C\# .NET API](../latest/nativeclient/dotnet-caching-api/dotnet-caching-api.html)**

    This section describes the primary classes, usage conventions, and C++ to .NET class mappings of the native client .NET API. It demonstrates how to use the API to create caches and perform data serialization.

-   **[Preserving Data](../latest/nativeclient/preserving-data/preserving-data.html)**

    A server may preserve the data queued and intended to be sent to a native client, such that the data is not discarded if communication between the server and native client is disrupted. Preservation prevents message loss, which can cause a native client to have inconsistent data. Redundant queues and a high availability server implementation may further ensure that queued data is not lost.

-   **[Security](../nativeclient/security/overviewsecurity.html)**

    *Security* describes how to implement the security framework for the <span class="keyword">GemFire</span> native client, including authentication, authorization, ecryption, and SSL client/server communication.

-   **[Remote Querying](../latest/nativeclient/remote-querying/remote-querying.html)**

    *Remote Querying* documents remote querying from the native client to the <span class="keyword">GemFire</span> cache server. Using examples and procedures, it describes how to use the APIs to run queries against cached data; work with query strings in the native client; create and manage queries; and create indexes.

-   **[Continuous Querying](../latest/nativeclient/continuous-querying/continuous-querying.html)**

    *Continuous Querying* describes how to implement continuous querying in the <span class="keyword">Pivotal GemFire</span> native client so that C++ and C\# .NET clients can run queries against events in the <span class="keyword">GemFire</span> cache server region. It also describes main features and the native client CQ API.

-   **[Using Connection Pools](../latest/nativeclient/connection-pools/connection-pools.html)**

    *Using Connection Pools* describes how connection pools achieve load balancing for the client and describes how to configure connection pools as server locators or as a list of servers.

-   **[Transactions](../latest/nativeclient/transactions/transactions.html)**

    *Transactions* describes how transactions work on the client side. It provides examples for running, suspending, and resuming transactions.

-   **[Function Execution](../latest/nativeclient/function-execution/function-execution.html)**

    *Function Execution* describes how you can execute application functions to achieve linear scalability. It explains how function execution works and lists specific use cases.

-   **[Delta Propagation](../latest/nativeclient/delta-propagation/delta-propagation.html)**

    *Delta Propagation* describes how deltas (updates to data) are propagated and how to implement delta propagation. It also analyzes performance limitations.

-   **[Programming Examples](../latest/nativeclient/programming-examples/programming-examples.html)**

    This chapter provides a set of programming examples to help you understand the <span class="keyword">GemFire</span> native client API.

-   **[Interoperability of Language Classes and Types](../latest/nativeclient/type_mappings/chapter_overview.html)**

    *Interoperability of Language Classes and Types* provides a table that maps C++ class methods to corresponding .NET class methods and a table that maps Java types to .NET types.

-   **[System Statistics](../latest/nativeclient/system-statistics/chapter_overview.html)**

    *System Statistics* provides information on the Pivotal GemFire installation and includes standard statistics for caching and distribution activities.

-   **[Installing the SQLite Persistence Manager](../latest/nativeclient/sqlite-persistence/chapter_overview.html)**

    *Installing the SQLite Persistence Manager* describes how to download, build and install the SQLite database libraries for use with disk overflow.

-   **[Glossary](../latest/nativeclient/glossary.html)**

    This glossary defines terms used in the documentation.


