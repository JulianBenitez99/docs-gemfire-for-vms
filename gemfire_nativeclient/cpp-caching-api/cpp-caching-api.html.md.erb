---
title:  Pivotal GemFire Native Client C++ API
---

*Pivotal GemFire Native Client C++ API* describes the primary classes, and usage conventions for the native client C++ API. It demonstrates how to use the API to create caches and perform data serialization.

The native client C++ API allows C++ and .NET developers to programmatically create, populate, and manage a Pivotal GemFire distributed system. The C++ library is thread-safe, except where specified otherwise in the online API documentation.

The online C++ API documentation is included in the `docs/cppdocs` directory of the GemFire native client product installation). It provides extensive implementation details for the C++ structures and functions.

Several example API programs are included in the `SampleCode` directory. See [QuickStart Examples and Guide](../introduction/examples-quickstart.html#examples-quickstart).

-   **[About the Native Client C++ API](../../gemfire_nativeclient/cpp-caching-api/gfe-cpp-api.html)**

    The native client C++ API allows C++ and .NET developers to programmatically create, populate, and manage a Pivotal GemFire distributed system. The C++ library is thread-safe, except where specified otherwise in the online API documentation.

-   **[Creating a Cache](../../gemfire_nativeclient/cpp-caching-api/creating-cache.html)**

    The code snippets in this section show cache creation.

-   **[Creating a Proxy Client-Side Region](../../gemfire_nativeclient/cpp-caching-api/creating-region.html)**

    This section provides code examples for creating and customizing proxy client-side regions.

-   **[Adding an Entry to the Cache](../../gemfire_nativeclient/cpp-caching-api/add-entry-to-cache.html)**

    You can populate a native client region with cache entries using the `Region::put` or the `Region::create` API functions. Code examples demonstrate these actions.

-   **[Accessing an Entry](../../gemfire_nativeclient/cpp-caching-api/accessing-entry.html)**

    The standard `Region::get API` method returns the value associated with the specified key, and passes the callback argument to any cache loaders or cache writers that are invoked in the operation.

-   **[Removing an Entry](../../gemfire_nativeclient/cpp-caching-api/removing-entry.html)**

    The standard `Region::remove` API removes the entry with specified key and provides a user-defined parameter object to any `CacheWriter` or `CacheListener` invoked in the process.

-   **[Serializing Data](../../gemfire_nativeclient/cpp-caching-api/serialization_overview.html)**

    All data that Pivotal GemFire moves out of the local cache must be serializable.

-   **[Implementing User-Defined Objects in Java Clients](../../gemfire_nativeclient/cpp-caching-api/user-defined-objects.html)**

    You can use one of two methods to implement a user-defined object in a Java client that works with C++ clients: `Instantiator.register` and `DataSerializable`.

-   **[Using a Custom Class](../../gemfire_nativeclient/cpp-caching-api/using-custom-class.html)**

    This example shows how to use the defined `BankAccount` custom key type and the `AccountHistory` value type.

-   **[Creating New Statistics](../../gemfire_nativeclient/cpp-caching-api/creating-new-statistics.html)**

    This example provides a programmatic code sample for creating and registering new statistics.


