---
title:  Data Serialization
---

All data that GemFire moves out of the local cache must be serializable.

Region data that must be serializable falls under the following categories:

-   Partitioned regions (except functions that add data locally to a partitioned region use the deserialized form).
-   Distributed regions.
-   Regions that are persisted or overflowed to disk.
-   Server or client regions in a client/server installation.
-   Regions distributed between gateways in a multi-site installation.
-   Regions that receive events from remote caches.
-   Regions that provide function arguments and results.

To minimize the cost of serialization and deserialization, GemFire avoids changing the data format whenever possible. This means your data may be stored in the cache in serialized or deserialized form, depending on how you use it. For example, if a server acts only as a storage location for data distribution between clients, it makes sense to leave the data in serialized form, ready to be transmitted to clients that request it. Partitioned region data is always stored in serialized form with one exceptionâ€”functions that add data to a partitioned region locally use the deserialized form.

-   **[Data Serialization Options](../../gemfire_nativeclient/dotnet-caching-api/dotnet-data-serialization-options.html)**

    Built-in .NET types are serialized automatically into the cache and can be retrieved by Java servers and other GemFire clients. For domain objects that are not simple types, you have three GemFire serialization options.

-   **[Serialize with GemFire PDX Serialization](../../gemfire_nativeclient/dotnet-caching-api/dotnet-gemfire-pdx-serialization.html)**

    Pivotal GemFire's Portable Data eXchange (PDX) is a cross-language data format that can reduce the cost of distributing and serializing your objects. PDX stores data in named fields that you can access individually, to avoid the cost of deserializing the entire data object. PDX also allows you to mix versions of objects where you have added or removed fields.

-   **[Serialize with the GemFire IGFSerializable Interface](../../gemfire_nativeclient/dotnet-caching-api/serialize-using-igfserializable.html)**

    The .NET `IGFSerializable` interface provides fast and compact data serialization.

-   **[Using a Custom Class With IGFSerializable](../../gemfire_nativeclient/dotnet-caching-api/custom-class-igfserializable.html)**

    An example shows how to use the `BankAccount` custom key type and the `AccountHistory` value type that were previously defined.


