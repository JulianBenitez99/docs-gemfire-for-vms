---
title:  Developing C++ Programs on Solaris
---

This section describes how to build and run a native client application on Solaris.

<a id="developing-solaris__section_B518757C7D7A405F9E43C1232C2D6B56"></a>
## Step 1. Set Environment Variables

**Note:**
When compiling external projects or applications that are used or referenced by the GemFire native client, make sure that you compile them for the same target architecture as your native client installation. For example, if you installed the 32-bit (x86) version of the native client, compile your external projects for 32-bit (x86) architecture.

Set the native client environment variables on each Solaris host. For each case, *&lt;productDir&gt;* is the path to the native client product directory.

**For Bourne and Korn shells (sh, ksh, bash)**

``` pre
GFCPP=<productDir>; export GFCPP
PATH=$GFCPP/bin:$PATH;export PATH
LD_LIBRARY_PATH=$GFCPP/lib:$LD_LIBRARY_PATH;export LD_LIBRARY_PATH
```

<a id="developing-solaris__section_15D24DFEFE024690A2652A4DC17EFFFB"></a>

## Step 2. Compile C++ Clients and Dynamically Link to Them to GemFire Library

Version 5.9 of the *SUNpro* compiler is supported on Solaris. The linker switches vary according to whether you are statically linking to the GemFire library.

To build and link a C++ client to GemFire on Solaris, the compilation command line includes the appropriate arguments from this table.

<a id="developing-solaris__table_428EFC82036240CA974E3061E5D31CCF"></a>

| Argument                                                                                       | Explanation                                                |
|------------------------------------------------------------------------------------------------|------------------------------------------------------------|
| `-D_REENTRANT`                                                                                 | Required to compile Solaris programs in a thread-safe way. |
| `-xarch=v8plus`                                                                                | Enables 32-bit compilation.                                |
| `-xarch=v9`                                                                                    | Enables 64-bit compilation.                                |
| `-ldl`; `-lpthread`; `-lc`; `-lm`; `-lsocket`; `-lrt`; `-lnsl`; `-ldemangle`; `-lkstat`; `-lz` | Additional libraries.                                      |
| `-library=stlport4`                                                                            | Solaris library compilation.                               |
| `-I$ GFCPP /include`                                                                           | Specifies the GemFire include directory.                   |

: <span class="tablecap">Table 1. Compiler Arguments on Solaris</span>

<a id="developing-solaris__section_81557A11797047A7941B47D44D1566AA"></a>

## Step 3. Make Sure the GemFire Library Can Be Loaded

When a C++ application is not statically linked to the GemFire library, the library must be dynamically loadable.

To verify that the GemFire library is available for loading, make sure you have added the path *GemFireDir*`/lib` to the *LD\_LIBRARY\_PATH* environment variable, where *GemFireDir* is the path to the GemFire product directory.
