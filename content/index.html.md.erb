---
title: Pivotal Cloud Cache
owner: Cloud Cache Engineers
---

## <a id='overview'></a>Overview

Pivotal Cloud Cache (PCC) is a high-performance, highly available caching layer for Pivotal Cloud Foundry (PCF).

PCC offers an in-memory key-value store. It delivers low-latency responses to a large number of concurrent data access requests.

PCC provides a service broker to create in-memory data clusters on demand. These clusters are dedicated to the PCF space and tuned for specific use cases defined by the plan. Service operators can create multiple plans to support different use cases.

PCC uses Pivotal GemFire. You can use PCC to store any kind of data objects using the [Pivotal GemFire Java client library](http://gemfire-90-javadocs.docs.pivotal.io/).

This documentation performs the following functions:

* Describes the features and architecture of PCC
* Provides the PCF operator with instructions for installing, configuring, and maintaining PCC
* Provides app developers instructions for choosing a service plan, creating, and deleting PCC service instances
* Provides app developers instructions for binding apps

## <a id='snapshot'></a>Product Snapshot

The following table provides version and version-support information about PCC:

<table class="nice">
    <th>Element</th>
    <th>Details</th>
    <tr>
        <td>Version</td>
        <td>v1.2.0</td>
    </tr>
    <tr>
        <td>Release date</td>
        <td>October 2, 2017</td>
    </tr>
    <tr>
        <td>Software component version</td>
        <td>GemFire v9.0.4</td>
    </tr>
    <tr>
        <td>Compatible Ops Manager version(s)</td>
        <td>v1.11.x and v1.12.x</td>
    </tr>
    <tr>
        <td>Compatible Elastic Runtime version(s)</td>
        <td>v1.11.x and v1.12.x</td>
    </tr>
    <tr>
        <td>IaaS support</td>
        <td>AWS, Azure, GCP, OpenStack, and vSphere</td>
    </tr>
    <tr>
        <td>IPsec support</td>
        <td>Yes</td>
    </tr>
</table>

## <a id='other-services'></a> PCC and Other PCF Services

<%= partial '../../p-cloud-cache/odb/on-demand-service-table' %>

## <a id='architecture'></a>PCC Architecture

### <a id='GFBasics'></a>GemFire Basics

Pivotal GemFire is the data store within PCC.
A small amount of administrative GemFire setup is required
for a PCC service instance,
and a limited portion of the GemFire API will be used
by any application.

The PCC architectural model is a client-server model.
Applications (or microservices) are the clients,
and PCC maintains a set of GemFire servers.
The GemFire servers provide a low latency, consistent,
fault tolerant data store within PCC.

![Client Server Model](client-server.png)

GemFire holds data in key/value pairs.
Each pair is called an entry.
Entries are logically grouped into sets called regions.
A region is a map (or dictionary) data structure.

The application (client) uses PCC as a cache.
A cache lookup (read) is a get operation on a GemFire region.
The cache operation of a cache write is a put operation
on a GemFire region.
The GemFire command-line interface, called `gfsh`,
facilitates region administration.
Use gfsh to create and destroy regions within
the PCC service instance.


### <a id='PCC-Cluster-Architecture'></a>The PCC Cluster

PCC deploys cache clusters that use Pivotal GemFire to provide high availability, replication guarantees, and eventual consistency.

When you first spin up a cluster, you'll have three locators and at least four servers.

<% mermaid_diagram do %>
  graph TD;
  Client
  subgraph P-CloudCache Cluster
  subgraph locators
  Locator1
  Locator2
  Locator3
  end
  subgraph servers
  Server1
  Server2
  Server3
  Server4
  end
  end
  Client==>Locator1
  Client-->Server1
  Client-->Server2
  Client-->Server3
  Client-->Server4
<% end %>


If you scale the cluster up, you'll have more servers, increasing the capacity of the cache. There always will be three locators.

<% mermaid_diagram do %>
  graph TD;
  Client
  subgraph P-CloudCache Cluster
  subgraph locators
  Locator1
  Locator2
  Locator3
  end
  subgraph servers
  Server1
  Server2
  Server3
  Server4
  Server5
  Server6
  Server7
  end
  end
  Client==>Locator1
  Client-->Server1
  Client-->Server2
  Client-->Server3
  Client-->Server4
  Client-->Server5
  Client-->Server6
  Client-->Server7
<% end %>

### <a id='MemberCommunication'></a>Member Communication

When a client connects to the cluster, it first connects to a locator. The locator replies with the IP address of a server for it to talk to. The client then connects to that server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Locator
    participant Server1
    Client->>+Locator: What servers can I talk to?
    Locator->>-Client: Server1
    Client->>Server1: Hello!
<% end %>

When the client wants to read or write data, it sends a request directly to the server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Server1
    Client->>+Server1: What's the value for KEY?
    Server1->>-Client: VALUE
<% end %>


If the server doesn't have the data locally, it fetches it from another server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Server1
    participant Server2
    Client->>+Server1: What's the value for KEY?
    Server1->>+Server2: What's the value for KEY?
    Server2->>-Server1: VALUE
    Server1->>-Client: VALUE
<% end %>

## <a id='workflow'></a>Workflow to Set Up a PCC Service

The workflow for the PCF admin setting up a PCC service plan:

<% mermaid_diagram do %>
  graph TD;
  subgraph PCF Admin Actions
  s1
  s2
  end

  subgraph Developer Actions
  s4
  end

  s1[1. Upload P-CloudCache.pivotal to Ops Manager]
  s2[2. Configure CloudCache Service Plans, i.e. caching-small]
  s1-->s2
  s3[3. Ops Manager deploys CloudCache Service Broker]
  s2-->s3
  s4[4. Developer calls `cf create-service p-cloudcache caching-small test`]
  s3-->s4
  s5[5. Ops Manager creates a CloudCache cluster following the caching-small specifications]
  s4-->s5
<% end %>

## <a id='recommended-usage'></a>Recommended Usage and Limitations

- PCC can be used as a cache. It supports the [look-aside cache pattern](https://content.pivotal.io/blog/an-introduction-to-look-aside-vs-inline-caching-patterns).
- PCC can be used to store objects in key/value format, where value can be any object.
- PCC works with gfsh versions v9.0.0 and later
- Any gfsh command not explained in the PCC documentation is **not supported**.
- PCC supports basic OQL queries, with no support for joins.

### Limitations

- Scale down of the cluster is not supported.
- Plan migrations, for example, `-p` flag with the `cf update-service` command, are not supported.
- WAN (Cross Data Center) replication is not supported.
- Persistent regions are not supported.

## <a id='security'></a>Security

Pivotal recommends that you do the following:

- Run PCC in its own network
- Use a load balancer to block direct, outside access to the Gorouter

To allow PCC network access from apps, you must create application security groups that allow access on the following ports: 

* 1099
* 8080
* 40404
* 55221

For more information, see the PCF [Application Security Groups](https://docs.pivotal.io/pivotalcf/adminguide/app-sec-groups.html#creating-groups) topic.

PCC works with the IPsec Add-on for PCF.
For information about the IPsec Add-on for PCF,
see [Securing Data in Transit with the IPsec Add-on](https://docs.pivotal.io/addon-ipsec/index.html).

### Authentication

Clusters are created with two default users: `cluster_operator` and `developer`.
A cluster can only be accessed using one of these two users.
All client applications, gfsh, and JMX clients must authenticate as one of these users accounts to access the cluster.

### Authorization

Default user roles `cluster_operator` and `developer` have different permissions:

- `cluster_operator` role has DATA:MANAGE, DATA:WRITE, and DATA:READ permissions.
- `developer` role has DATA:WRITE and DATA:READ permissions.

You can find more details about these permissions in the Pivotal GemFire [Implementing Authorization](http://gemfire.docs.pivotal.io/geode/managing/security/implementing_authorization.html) topic.

## <a id='bugs'></a>Known Issues

### Pulse Issue
The topology diagram might not be accurate and might show more members than are actually in the cluster. 
However, the numerical value displayed on the top bar is accurate.

## <a id='feedback'></a> Feedback
Please provide any bugs, feature requests, or questions to the [Pivotal Cloud Foundry Feedback list](mailto:pivotal–cf–feedback@pivotal.io).
