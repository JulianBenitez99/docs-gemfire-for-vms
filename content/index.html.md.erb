---
title: Cloud Cache for Pivotal Cloud Foundry 
owner: Cloud Cache Engineers
---

This is documentation for the the Cloud Cache for PCF service tile. 
# <a id='overview'></a>Overview

**Pivotal Cloud Cache (PCC)** for PCF provides a service broker for easy on-demand creation of in memory data cluster. It creates dedicated (to the CF space) clusters which are tuned for the intended use cases defined by the plan. Service operators can create multiple plans to support different use cases. Pivotal Cloud Cache uses Pivotal GemFire.

# <a id='release-notes'></a>Release Notes
## <a id='v1.0'></a>Pivotal Cloud Cache Version 1.0
### <a id='new-in-this-release'></a>Minimum Version Requirements

- PCF 1.9.11 and above.

### <a id='new-in-this-release'></a>New in This Release
- Support for application look aside cache pattern
- Multi AZ support
- On Demand provisioning
- MVP Role Based Access Control
- Quotas - For both service instances and number of servers in a cluster
- GemFire 9.0.2
- Cluster is managed and configured with the cf CLI service commands and gfsh

# <a id='architecture'></a>Architecture

When you first spin up a cluster, you'll have three locators and some number of servers.

<% mermaid_diagram do %>
  graph TD; 
  Client
  subgraph P-CloudCache Cluster
  subgraph locators
  Locator1
  Locator2
  Locator3
  end
  subgraph servers
  Server1
  Server2
  Server3
  Server4
  end
  end
  Client==>Locator1
  Client-->Server1
  Client-->Server2
  Client-->Server3
  Client-->Server4
<% end %>

If you scale the cluster up, you'll have more servers. There will always be three locators.

<% mermaid_diagram do %>
  graph TD; 
  Client
  subgraph P-CloudCache Cluster
  subgraph locators
  Locator1
  Locator2
  Locator3
  end
  subgraph servers
  Server1
  Server2
  Server3
  Server4
  Server5
  Server6
  Server7
  end
  end
  Client==>Locator1
  Client-->Server1
  Client-->Server2
  Client-->Server3
  Client-->Server4
  Client-->Server5
  Client-->Server6
  Client-->Server7
<% end %>

When a client connects to the cluster, it first connects to a locator.
The locator replies with the IP of a server for it to talk to.
The client will then connect to that server.
<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Locator
    participant Server1
    Client->>+Locator: What servers can I talk to?
    Locator->>-Client: Server1
    Client->>Server1: Hello!
<% end %>


When the client want to read or write data, it will send a request directly to the server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Server1
    Client->>+Server1: What's the value for KEY?
    Server1->>-Client: VALUE
<% end %>

If the server doesn't have the data locally, it will fetch it from another server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Server1
    participant Server2
    Client->>+Server1: What's the value for KEY?
    Server1->>+Server2: What's the value for KEY?
    Server2->>-Server1: VALUE
    Server1->>-Client: VALUE
<% end %>

# <a id='sequence-diagram'></a>Workflow

The workflow for the PCF Admin, setting up a P-CloudCache service plan:

<% mermaid_diagram do %>
  graph TD; 
  subgraph PCF Admin Actions
  s1
  s2
  end

  subgraph Developer Actions
  s4
  end

  s1[1. Upload P-CloudCache.pivotal to Ops Manager]
  s2[2. Configure CloudCache Service Plans, i.e. caching-small]
  s1-->s2
  s3[3. Ops Manager deploys CloudCache Service Broker]
  s2-->s3
  s4[4. Developer calls `cf create-service p-cloudcache caching-small test`]
  s3-->s4
  s5[5. Ops Manager creates a CloudCache cluster following the caching-small specifications]
  s4-->s5
<% end %>



# <a id='recommeded-usage'></a>Recommended Usage and Limitations
Pivotal Cloud Cache (PCC) for PCF can be used as a cache. We currently support [look aside cache pattern](https://content.pivotal.io/blog/an-introduction-to-look-aside-vs-inline-caching-patterns). 
 
- PCC can be used to store objects in key/value format, where value can be any object.
- Any command in GFSH not explained in the documentation is **not supported**.
- We support basic OQL queries, no support for joins.

#### Limitations
- Scale down of the cluster is not supported.
- Plan migrations are not supported, i.e. `-p` flag with `cf update-service` command.


# <a id='security'></a>Security
Pivotal recommends that Pivotal Cloud Cache for PCF is run in its own network.

To allow this service to have network access you must create ASG. For more information, see [Networks, Security, and Assigning AZs](https://docs.pivotal.io/pivotalcf/1-9/adminguide/app-sec-groups.html#creating-groups).

### Authentication
Clusters are created with 2 default users, **operator** and **developer**. Cluster can only be accessed using one of these 2 users. All client applications, gfsh, JMX clients needs to use one of these users to access the cluster.

### Authorization
Default users "operator" and "developer" both have different permissions. We have 2 default roles already created in Pivotal Cloud Cache.

 - ***Operator*** role has "DATA:MANAGE, DATA:WRITE, DATA:READ" permissions
 - ***Developer*** role has "DATA:WRITE, DATA:READ" permissions 

More details on the permissions can be found [here](http://gemfire.docs.pivotal.io/geode/managing/security/implementing_authorization.html)

