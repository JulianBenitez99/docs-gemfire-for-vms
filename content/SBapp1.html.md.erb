---
title: An Example Spring Boot App
---

 <!-- 
 Copyright (c) VMware, Inc. 2022. All rights reserved.
 Licensed to the Apache Software Foundation (ASF) under one or more contributor license
 agreements. See the NOTICE file distributed with this work for additional information regarding
 copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance with the License. You may obtain a
 copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software distributed under the License
 is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 or implied. See the License for the specific language governing permissions and limitations under
 the License.
 -->

<a id="sample-SB1"></a>

The versioned example Spring Boot Data GemFire app at
[PCC-Sample-App-PizzaStore](https://github.com/pivotal-cf/PCC-Sample-App-PizzaStore)
uses the <%=vars.product_full%> service instance as a system of record.
Directions for running the app are in the GitHub repository's `README.md` file.
The app is versioned, and branches of the repository represent <%=vars.product_short%>
versions.
For <%=vars.product_short%> <%=vars.product_version%>, use the branch named
`release/<%=vars.product_version_period%>`.

The app uses Spring Boot Data GemFire. The documentation for this opinionated extension of Spring Data GemFire is at [Spring Boot for Apache Geode & Pivotal GemFire Reference Guide](https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/).

The app saves pizza orders within the <%=vars.component_product%> servers of a <%=vars.product_short%> service
instance.
A REST interface provides a way for the app to take orders for
pizza toppings and sauces.

The app demonstrates how to set up and run the app based on
[The App's Location](architecture.html#AppLocation).

## Top Down Explanation

In this opinionated version of Spring Boot Data GemFire,
at the topmost level of the app,
the `@SpringBootApplication` annotation causes
the app to have a `ClientCache` instance.
Within the example app's `CloudcachePizzaStoreApplication` class,
place the annotation at the class definition level:

```
@SpringBootApplication
public class CloudcachePizzaStoreApplication
```

This app is the client within a standard client/server architecture.
The <%=vars.product_short%> service instance contains the servers.
The client cache is a driver for interactions with the servers.

The Spring repository construct is the preferred choice to use
for the data storage, which will be an <%=vars.component_product%> region.
To implement it,
annotate this example's `PizzaRepository` implementation
with `@Repository`:

```
@Repository
public interface PizzaRepository extends CrudRepository<Pizza, String>
```

An <%=vars.component_product%> region underlies the Spring repository,
storing the ordered pizzas.
Annotate the `Pizza` class model with `@Region`:

```
@Region("Pizza")
public class Pizza {
```

Within the `Pizza` class, identify the key of the <%=vars.component_product%> region entries with
the `@Id` annotation.
It is the `name` field in this example:

```
@Getter @Id @NonNull
private final String name;
```

The `@SpringBootApplication` annotation 
results in a chain of opinionated defaults,
all of which are appropriate for this app.
It identifies the app as a client.
The client receives an <%=vars.component_product%> client cache.
Any regions will default to type `PROXY`.
A proxy type of region forwards all region operations to the
GemFire servers; no data is stored within the app's client cache.

See [Configuring Regions](https://docs.spring.io/spring-data-gemfire/docs/current/reference/html/#bootstrap-annotation-config-regions) for Spring details.
See [Region Design](region-design.html) for <%=vars.product_short%> details on regions.

## The App Controller

The `AppController` class implements the REST interface,
by annotating the class with `@RestController`:

```
@RestController
public class AppController
```
As pizzas are ordered,
a `CrudRepository.save()` operation causes an
<%=vars.component_product%> `put` operation that updates the region on the <%=vars.component_product%> server.

