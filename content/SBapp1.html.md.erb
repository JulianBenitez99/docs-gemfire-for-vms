---
title: An Example Spring Boot App
---
<a id="sample-SB1"></a>

The versioned example Spring Boot Data GemFire app at
[PCC-Sample-App-PizzaStore](https://github.com/pivotal-cf/PCC-Sample-App-PizzaStore)
uses the <%=vars.product_full%> service instance as a system of record.
Directions for running the app are in the GitHub repository's `README.md` file.
The app is versioned, and branches of the repository represent <%=vars.product_short%>
versions.
For <%=vars.product_short%> <%=vars.product_version%>, use the branch named
`demo`.

The app uses Spring Boot Data GemFire. The documentation for this opinionated extension of Spring Data GemFire is at [Spring Boot for Apache Geode & Pivotal GemFire Reference Guide](https://docs.spring.io/spring-boot-data-geode-build/1.2.x/reference/html5/).

The app saves pizza orders within the <%=vars.component_product%> servers of a <%=vars.product_short%> service
instance.
A REST interface provides a way for the app to take orders for
pizza toppings and sauces.

In addition, the app demonstrates:

- How to set up and run the app based on
[The App's Location](architecture.html#AppLocation).
- <%=vars.component_product%> continuous queries as used by a Spring Boot app.

## Top Down Explanation

In this opinionated version of Spring Boot Data GemFire,
at the topmost level of the app,
the `@SpringBootApplication` annotation causes
the app to have a `ClientCache` instance.
Within the example app's `CloudcachePizzaStoreApplication` class,
place the annotation at the class definition level:

```
@SpringBootApplication
public class CloudcachePizzaStoreApplication
```

This app is the client within a standard client/server architecture.
The <%=vars.product_short%> service instance contains the servers.
The client cache is a driver for interactions with the servers.

The Spring repository construct is the preferred choice to use
for the data storage, which will be an <%=vars.component_product%> region.
To implement it,
annotate this example's `PizzaRepository` implementation
with `@Repository`:

```
@Repository
public interface PizzaRepository extends CrudRepository<Pizza, String>
```

An <%=vars.component_product%> region underlies the Spring repository,
storing the ordered pizzas.
Annotate the `Pizza` class model with `@Region`:

```
@Region("Pizza")
public class Pizza {
```

Within the `Pizza` class, identify the key of the <%=vars.component_product%> region entries with
the `@Id` annotation.
It is the `name` field in this example:

```
@Getter @Id @NonNull
private final String name;
```

The `@SpringBootApplication` annotation 
results in a chain of opinionated defaults,
all of which are appropriate for this app.
It identifies the app as a client.
The client receives an <%=vars.component_product%> client cache.
Any regions will default to type `PROXY`.
A proxy type of region forwards all region operations to the
Gemfire servers; no data is stored within the app's client cache.

See [Configuring Regions](https://docs.spring.io/spring-data-gemfire/docs/current/reference/html/#bootstrap-annotation-config-regions) for Spring details.
See [Region Design](region-design.html) for <%=vars.product_short%> details on regions.

## The App Contoller

The `AppController` class implements the REST interface,
by annotating the class with `@RestController`:

```
@RestController
public class AppController
```
As pizzas are ordered,
a `CrudRepository.save()` operation causes an
<%=vars.component_product%> `put` operation that updates the region on the <%=vars.component_product%> server.

## Continuous Queries in the App

The app defines two continuous queries (CQ).
See [Handling Events](events.html) for a brief introduction to
continuous queries.

The first CQ queries for any (and every) pizza order.
Its callback logs the order.

The second CQ queries for pizzas with a `PESTO` sauce.
When a pesto-sauced pizza is ordered,
the callback adds that pizza to a second region called `Name`.

Within a Spring Boot Data GemFire app,
to specify a continuous query:

- annotate the class that defines the queries with `@Component`:

    ```
    @Component
    public class PizzaQueries
    ```
- annotate the callback method with `@ContinuousQuery` and define
the query, as in the app's pesto pizza order example:

    ```
    @ContinuousQuery(name = "PestoPizzaOrdersQuery", durable = true,
        query = "SELECT * FROM /Pizza p WHERE p.sauce.name = 'PESTO'")
    public void handlePestoPizzaOrder(CqEvent event)
    ```
    The annotation causes an implementation of all three needed items
    for this type of event handling. It defines the query,
    registers the query as a continuous query event,
    and it identifies the callback method to invoke when the event occurs.
