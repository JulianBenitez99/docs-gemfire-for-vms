---
title: VMware Tanzu GemFire Architecture
---

## <a id='GFBasics'></a>Tanzu GemFire Basics

<%=vars.component_product%> is the data store within <%=vars.product_full%>.
A <%=vars.product_short%> service instance requires a small amount of administrative setup, and any app will use a limited portion of the API.

The <%=vars.product_short%> architectural model is a client-server model. The clients are apps or microservices, and the servers are a set of cluster servers maintained by a <%=vars.product_short%> service instance. The servers provide a low-latency, consistent, fault-tolerant data store within <%=vars.product_short%>.

![Client Server Model](client-server.png)

The cluster holds data in key/value pairs. Each pair is called an **entry**. Entries are logically grouped into sets called **regions**. A region is a map (or dictionary) data structure.

The app (client) uses <%=vars.product_short%> as a cache. A cache lookup (read) is a get operation on a region. The cache operation of a cache write is a put operation on a region.
The command-line interface, called gfsh, facilitates region administration. Use gfsh to create and destroy regions within the <%=vars.product_short%> service instance.

## <a id='AppLocation'></a>The App's Location

A running app's location affects how it communicates with the
<%=vars.product_short%> service instance.
Apps may run in one of three locations:

- In the services foundation where the <%=vars.product_short%>
service instance runs. These apps require no extra communication support.
- In an app foundation, where a user-provided service instance proxies
the communication to the <%=vars.product_short%> service instance.
Communication with the <%=vars.product_short%> service instance requires
a service gateway.
- Outside of any platform, where a platform is composed of any and all
foundations. 
Communication with the <%=vars.product_short%> service instance requires
a service gateway.

![Interaction of Apps and Foundations](app-location.png)

To use a service gateway, the operator must
[Configure a Service Gateway](configure-service-gateway.html).
The developer must [Provide Optional Parameters](create-instance.html#params)
when creating the <%=vars.product_short%> service instance.
And, the app must be given and use properties that authenticate
and authorize [Communicating with a Service Instance](running-app.html#app-location) through the service gateway.

## <a id='MemberCommunication'></a>Member Communication

When a client connects to the cluster, it first connects to a locator. The locator replies with the IP address of a server for it to talk to. The client then connects to that server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Locator
    participant Server1
    Client->>+Locator: What servers can I talk to?
    Locator->>-Client: Server1
    Client->>Server1: Hello!
<% end %>

When the client wants to read or write data, it sends a request directly to the server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Server1
    Client->>+Server1: What's the value for KEY?
    Server1->>-Client: VALUE
<% end %>

If the server doesn't have the data locally, it fetches it from another server.

<% mermaid_diagram do %>
  sequenceDiagram
    participant Client
    participant Server1
    participant Server2
    Client->>+Server1: What's the value for KEY?
    Server1->>+Server2: What's the value for KEY?
    Server2->>-Server1: VALUE
    Server1->>-Client: VALUE
<% end %>
