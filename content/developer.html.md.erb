---
title: Developer Guide
owner: Cloud Cache Engineers
---

## View all plans available for Pivotal Cloud Cache

Using the CF CLI, the command below shows all plans available for Pivotal Cloud Cache.

```
$ cf marketplace -s p-cloudcache

Getting service plan information for service p-cloudcache as admin...
OK

service plan   description      free or paid
extra-small    Caching Plan 1   free
small          Caching Plan 2   free
medium         Caching Plan 3   free
large          Caching Plan 4   free
extra-large    Caching Plan 5   free
```

Please note that the plan names displayed above are plan names configured by the operator on tile installation.

## <a id="create"></a> Creating a Pivotal Cloud Cache Service Instance

You can create service instances using the CF CLI.

```
$ cf create-service p-cloudcache <plan-name> <service-name>
```

Creation of service instances is asynchronous. You can run the `cf services` command to get the current status of the service creation and other service instances in the current org and space:

```
$ cf services
Getting services in org my-org / space my-space as user...
OK

name                  service        plan      bound apps     last operation
service-name          p-cloudcache   small                    create in progress
```

Eventually, the status should change from `create in progress` to `create succeeded`.

### <a id="params"></a> Optional Parameters
You can create a customized service instance by passing optional parameters to `cf
create-service`. For example:

```
$ cf create-service p-cloudcache small my-service-name -c '{"num_servers": 5}'
```

The Cloud Cache service broker supports the following parameters:

* `num_servers` (int) - description: the number of server instances in the cluster. The minimum value is 4. The maximum and default values are configured by operator.
* `new_size_percentage` (int) - The percentage of the heap to allocate to young
generation. This value must be between 5 and 83. By default the new size is 2G
or 10% of heap, whichever is smaller.


## <a id="create"></a> Updating a Pivotal Cloud Cache Service Instance
All optional parameters can be applied to an existing service instance using the `cf update-service` command.

```
$ cf update-service my-service-name -c '{"new_size_percentage": 20}'
```

Previously specified optional parameters will be persisted through subsequent updates. To return the service instance to default values the defaults must be explicitly specified as optional parameters.
For example, if I create a service instance with 5 servers using a plan with a default value of 4 servers

```
$ cf create-service p-cloudcache small my-service-name -c '{"num_servers": 5}'
```

and then I update the new size percentage

```
$ cf update-service my-service-name -c '{"new_size_percentage": 50}'
```

the resulting service instance will have 5 servers and new size equal to 50% of heap.

## <a id="updates"></a> Plan Updates
The plan available on cf marketplace may be changed by the operator. If the operator changes the default value of one of the optional parameters this change will not affect existing service instances. If the operator changes the allowed values of one of the optional parameters (e.g. decreasing the maximum value for `num_servers`) existing instances that exceed the new limits will not be affected but any subsequent service update that changes that optional parameter must adhere to the new limits.

If you see the following error message when attempting to update a service instance,

```
cf update-service  my-service-name -c '{"num_servers": 5}'
Updating service instance my-service-name as admin...
FAILED
Server error, status code: 502, error code: 10001, message: Service broker error: Service cannot be updated at this time, please try again later or contact your operator for more information
```

this indicates that the operator has made an update to the plan used by this service instance. You must wait for the operator to apply plan changes to all service instances before you will be able to make further service instance updates.

## <a id="accessing"></a> Accessing a Service Instance

Once your service instance is created, you can start accessing it. Usually, before using your service instance from a deployed CF app, you'll want to set up cache regions. This can be done via the `gfsh` command line tool. In order to connect, you'll first need to set up a service key.

### <a id="create-service-key"></a> Creating Service Keys

Service keys provide a way to access your service instance outside the scope of a deployed CF app. You can create these using the CF CLI.

```
$ cf create-service-key <my-service-name> <my-service-key-name>
```

Once you have done so, view the newly created service key:

```
$ cf service-key  <my-service-name> <my-service-key-name>
```

This should return output similar to the following:

```
{
  "locators": [
    "10.244.0.66[55221]",
    "10.244.0.4[55221]",
    "10.244.0.3[55221]"
  ],
  "urls": {
    "gfsh": "<gfsh-url>",
    "pulse": "<pulse-url>"
  },
  "users": [
    {
      "password": "<developer-password>",
      "username": "developer"
    },
    {
      "password": "<operator-password>",
      "username": "operator"
    }
  ]
}
```

This returned structure contains a few interesting pieces of information:

* `operator` and `developer` credentials.
* gfsh-url provides a URL which can be used to connect the gfsh client to the service instance
* pulse-url provides a URL which can be used to view the Pulse dashboard in a web browser which allows the service instance status to be monitored. You can use the developer credentials to authenticate.

The `operator` and `developer` roles provide access to different functions on the service instance.  The `operator` credentials can be used to administer the service instance (for example, to define or delete cache regions). It can also perform the same functions the `developer` credentials allow: performing CRUD data operations. As a best practice, you should use the role with the least amount of permissions necessary.

### <a id="gfsh-connect"></a> Connecting with gfsh

Start the `gfsh` command line tool:

```
$ gfsh
    _________________________     __
   / _____/ ______/ ______/ /____/ /
  / /  __/ /___  /_____  / _____  /
 / /__/ / ____/  _____/ / /    / /
/______/_/      /______/_/    /_/    9.0.1

Monitor and Manage Pivotal GemFire
gfsh>
```

From the `gfsh>` prompt, connect to your service instance as `operator`:

```
gfsh>connect --use-http --url=<gfsh-url> --user=operator --password=<operator-password>
```

## <a id="use"></a> Using Cloud Cache

### <a id="create-regions"></a> Creating Regions with gfsh

After connecting with `gfsh` as an operator you can define a new cache region.

```
gfsh>create region --name=my-cache-region --type=PARTITION_HEAP_LRU
     Member      | Status
---------------- | -------------------------------------------------------
cacheserver-z2-1 | Region "/my-cache-region" created on "cacheserver-z2-1"
cacheserver-z3-2 | Region "/my-cache-region" created on "cacheserver-z3-2"
cacheserver-z1-0 | Region "/my-cache-region" created on "cacheserver-z1-0"
cacheserver-z1-3 | Region "/my-cache-region" created on "cacheserver-z1-3"
```

You can test the newly created region by writing and reading values via gfsh:

```
gfsh>put --region=/my-cache-region --key=test --value=thevalue
Result      : true
Key Class   : java.lang.String
Key         : test
Value Class : java.lang.String
Old Value   : <NULL>


gfsh>get --region=/my-cache-region --key=test
Result      : true
Key Class   : java.lang.String
Key         : test
Value Class : java.lang.String
Value       : thevalue
```

However, in practice, you'll most likely want to perform these operations from a deployed CF app. In order to do that, you must bind the service instance to these apps.

### <a id="bind-service"></a> Binding an App to a Service Instance

Binding your apps to a service instance allows them to connect to it and read/write data to the region. This can be done via the CF CLI:

```
$ cf bind-service <my-app-name> <my-cloud-cache-service-instance-name>
```

This should provide connection information via the VCAP_SERVICES environment variable, which your app can use to configure components (e.g. a GemFire client cache) to use the service instance.

### <a id="pulse"></a> Using the Pulse dashboard

You can access the Pulse dashboard for a service instance by accessing the pulse-url obtained from a service key (as shown earlier) in a web browser. Use either of the operator or developer credentials to authenticate.

## <a id="delete"></a> Deleting a Service Instance

You can delete service instances using the CF CLI. Before doing so, you will also need to remove any existing app bindings and service keys.

```
cf delete-service-key <my-service-name> <my-service-key-name>
cf unbind-service <my-app-name> <my-service-name>
cf delete-service <my-service-name>
```
Deletions are asynchronous. You can use the `cf services` command to get the current status of the service instance deletion.

## <a id="recommended-usage"></a> Recommended Usage and Limitations

