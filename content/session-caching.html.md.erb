---
title: Session State Caching
---

## <a id="ssc"></a> Enable Session State Caching

There are two ways to Enable Session State Caching.

### <a id="ssc"></a> Use a Java Buildpack

By default, the Tomcat instance is configured to store all Sessions and their data in memory. Under
certain circumstances it may be appropriate to persist the Sessions and their data to a repository.
When this is the case (small amounts of data that should survive the failure of any individual instance),
the buildpack can automatically configure Tomcat to do so by binding an appropriate service, in this
case <%=vars.product_short%>.

When the `session-replication` tag is specified the sessions are configured to be stored in a service instance,
thus moving the data out of Tomcat. An application bound to this service will start running in a Tomcat
instance connected to the service. A region for storing sessions will be created and called
`gemfire_modules_sessions`, and the expiration for sessions is automatically configured to 30 minutes.
This feature is available in Java buildpack version 3.19 and higher, up to but not including version 4.
It is then available again in version 4.3.

To enable session state caching, do _one_ of the following items:

- Option 1: When creating your service instance name, specify the `session-replication` tag. For example:

    <pre class='terminal'>
     $ cf create-service p-cloudcache small-plan my-service-instance -t session-replication</pre>

- Option 2: Update your service instance, specifying the `session-replication` tag:

    <pre class='terminal'>
    $ cf update-service new-service-instance -t session-replication</pre>

- Option 3: When creating the service, append the service instance name with the string `-session-replication`,
for example `my-service-instance-session-replication`.

If you need to use a different version of <%=vars.product_full%>
than is provided by the Java buildpack,
follow the instructions in [Create a Custom Buildpack](#custom-ssc-buildpack).

### <a id="ssc-spring-session"></a> Use Spring Session

To use
[Spring Session](http://projects.spring.io/spring-session/)
for session state caching for apps with <%=vars.product_short%>, follow the steps below:

1. Make the following changes to the app:
  * Replace existing Spring Session `@EnableXXXHttpSession` annotation with `@EnableGemFireHttpSession(maxInactiveIntervalInSeconds = N)` where `N` is seconds.
  * Add the `spring-session-data-geode` and `spring-data-geode` dependencies to the build.
  * Add beans to the Spring app config.

    For more information, see the [spring-session-data-gemfire-example](https://github.com/jxblum/spring-session-data-gemfire-example) repository.

2. Create a region named `ClusteredSpringSessions` in gfsh when connected
with a security role that can manage cluster data:
  ```
  create region --name=ClusteredSpringSessions --type=PARTITION_HEAP_LRU
  ```

## <a id="disable-nearcaching"></a> Disable Near Caching Within the App

Near caching is when an app locally caches data.
Near caching uses an embedded cache within the app.
Web apps that deploy Tomcat with <%=vars.component_product%> session state caching
have near caching by default.
To keep an app stateless, you will want to disable near caching.

There are two methods for disabling near caching.
Choose and implement one of these methods:

- Create and use a custom buildpack (that disables near caching) for the app.

- Create and use a custom buildpack (that disables near caching) that
resides in an external repository.
Modify the app setup to acquire the configuration
from the external repository. This method facilitates having a single
configuration that may be used by a variety of apps.

### <a id="disable-with-buildpack"></a> Use a Custom Java Buildpack

Create a custom buildpack that disables near caching with the
procedure at [Create a Custom Buildpack](#custom-ssc-buildpack).

### <a id="disable-with-repo"></a> Use an External Repository for Configuration

There are two parts to this method for disabling near caching within the app.
The first part builds a repository to hold the configuration
and custom buildpack,
and then pushes the repository to the space such that the app will
have access.
The second part changes the app configuration such that it uses
the custom buildpack.

The procedure to build the repository:

1. Make a directory to hold the configuration:

    ```
    mkdir tomcat-config
    ```
2. Make other needed files and directories within the newly created directory:

    ```
    cd tomcat-config
    mkdir public
    mkdir -p tomcat-1.0.0/conf
    touch Staticfile
    ```
3. Edit `Staticfile` to contain:

    ```
    root: public
    directory: visible
    ```

4. Create `tomcat-1.0.0/conf/context.xml`, and edit the file such that it
contains the following content:

    ```
    <?xml version='1.0' encoding='UTF-8'?>
    <!--
    ~ Copyright 2013-2019 the original author or authors.
    ~
    ~ Licensed under the Apache License, Version 2.0 (the "License");
    ~ you may not use this file except in compliance with the License.
    ~ You may obtain a copy of the License at
    ~
    ~      http://www.apache.org/licenses/LICENSE-2.0
    ~
    ~ Unless required by applicable law or agreed to in writing, software
    ~ distributed under the License is distributed on an "AS IS" BASIS,
    ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    ~ See the License for the specific language governing permissions and
    ~ limitations under the License.
    -->
    <Context>
        <Resources allowLinking='true'/>
        <Manager className='org.apache.geode.modules.session.catalina.Tomcat8DeltaSessionManager' enableLocalCache='false' regionAttributesId='PARTITION_REDUNDANT_HEAP_LRU'/>
    </Context>
    ```
5. Place a compressed TAR format version of the `tomcat-1.0.0` directory
into the `public` directory:

    ```
    tar -czf tomcat-1.0.0.tar.gz tomcat-1.0.0/
    cp tomcat-1.0.0.tar.gz public/
    ```

6. Use `cf push` to place the configuration into
the <%=vars.app_runtime_full%> space that will host this configuration:

    ```
    cf push tomcat-config
    ```

7. Issue the command

    ```
    cf apps
    ```

    to acquire the URL of the `tomcat-config` app.  Prepend the listed URL
    with `http://` to have the URL that will identify the location of the
    configuration needed by the app.

    For example, your complete URL will look something like
    `http://tomcat-config.apps.yellow-green.cf-app.com`.

8. Within the `tomcat-config` directory, edit `public/index.yml`
to have URL-specific contents.
Using the example URL as a guide, the contents of this `public/index.yml`
file will contain:

    ```
    ---
    1.0.0: http://tomcat-config.apps.yellow-green.cf-app.com/tomcat-1.0.0.tar.gz

    ```

9. Push the app a second time with its completed configuration:

    ```
    cf push tomcat-config
    ```

The second part of this procedure modifies the app such that it uses
the custom buildpack:

1. Edit the `manifest.yml` file by appending this URL-specific configuration
to the `applications` section of the `manifest.yml` file:

    ```
      env:
        JBP_CONFIG_TOMCAT: "{ tomcat: { external_configuration_enabled: true }, external_configuration: { repository_root: \"http://tomcat-config.apps.yellow-green.cf-app.com\" } }"
    ```

    Substitute your complete URL for the URL in this example.

    A complete `manifest.yml` file will appear similar to:

    ```
    ---
    applications:
    - name: http-session-caching
      path: build/libs/http-session-caching-0.0.1.war
      buildpack: java_buildpack_offline
      env:
        JBP_CONFIG_TOMCAT: "{ tomcat: { external_configuration_enabled: true }, external_configuration: { repository_root: \"http://tomcat-config.apps.yellow-green.cf-app.com\" } }"
    ```

2. Push, bind, and start your app with a buildpack of version 4.18 or
a more recent version:

    ```
    cf push -f ./manifest.yml --no-start -b https://github.com/cloudfoundry/java-buildpack.git#v4.18
    
    cf bind-service APP-NAME SERVICE-INSTANCE-NAME

    cf start APP-NAME
    ```

3. To verify that local caching is disabled for the app,
use `cf ssh` to access the app and visually verify that
`enableLocalCache='false'` appears within the `context.xml` file.
Use this sequence of commands:

    ```
    cf ssh APP-NAME

    find ./ -name *.xml

    cat ./app/.java-buildpack/tomcat/conf/context.xml
    ```
   

## <a id="custom-ssc-buildpack"></a> Create a Custom Buildpack

If your <%=vars.product_full%> version is not compatible with the dependencies
included in the Java buildpack,
you can create a custom buildpack.
This procedure creates a custom Java buildpack,
with customized geode_store dependencies.

1. Clone the [Cloud Foundry Java buildpack repository](https://github.com/cloudfoundry/java-buildpack):

    ```
    $ git clone git@github.com:cloudfoundry/java-buildpack.git
    ```

2. Change directories to the newly-created repository clone:

    ```
    cd java-buildpack
    ```

3. If you want to change the version of <%=vars.product_full%> used by the buildpack, edit the Tomcat
   configuration file to specify the version of <%=vars.product_full%> you are using.
   The file to edit is `/config/tomcat.yml`.
   The single change is the version of `geode_store`.
   Here is the portion of the file to be changed,
   with the string to change in bold:

    <pre>
    geode_store:
      <b>version: 1.11.+</b>
      repository_root: https://java-buildpack-tomcat-gemfire-store.s3-us-west-2.amazonaws.com
    </pre>

      For versions of <%=vars.product_full%> under 1.11 you may need to use an older version of geode_store
      dependencies, which can be done by changing the version to 0.0.2 in the same section shown above.
      <br /><br />
      <b>Warning:</b> For versions of geode_store that are 1.11 or greater you must be using a version of the Java
      Buildpack that is v4.36 or greater. Using versions that are older will result in issues with geode_store
      dependencies when applications are bound to a session-replication service instance. For Java Buildpack versions
      older than v.4.36 geode_store version 0.0.2 should be used.

4. If you change the version of <%=vars.product_full%> in the step above, you may also need to change
   the version of the Geode Session State Module used by the buildpack. To do this edit the following line
   in the file `tomcat_geode_store.rb` to the appropriate version of Tomcat for your current geode_store version:
   <pre>
   SESSION_MANAGER_CLASS_NAME = 'org.apache.geode.modules.session.catalina.Tomcat8DeltaSessionManager'
   </pre>
   For versions of geode_store that are 1.11 or greater `Tomcat9DeltaSessionManager` should be used. For versions
   older than 1.11 (including version 0.0.2) `Tomcat8DeltaSessionManager` should be used.

3. TO DISABLE NEAR CACHING WITHIN THE CUSTOM BUILDPACK, Edit the Apache Geode ruby configuration file such that it disables
caching within the app.
The file to edit is `lib/java_buildpack/container/tomcat/tomcat_geode_store.rb`.
The single change is the string `true` to instead be `false`.
Before the change, here is the portion of the file to be changed,
with the string to change highlighted:

    <pre>
    def add_manager(context)
      context.add_element 'Manager',
                          'className' => SESSION_MANAGER_CLASS_NAME,
                          'enableLocalCache' => '<b>true</b>',
                          'regionAttributesId' => REGION_ATTRIBUTES_ID
    end
    </pre>

    After changing the highlighted string from `true` to `false`,
    here is the portion of the file with the change highlighted:

    <pre>
    def add_manager(context)
      context.add_element 'Manager',
                          'className' => SESSION_MANAGER_CLASS_NAME,
                          'enableLocalCache' => '<b>false</b>',
                          'regionAttributesId' => REGION_ATTRIBUTES_ID
    end
    </pre>

5. Create your custom Java buildpack on the platform with a command
   of the form:

    ```
    cf create-buildpack BUILDPACK PATH POSITION
    ```
   where `BUILDPACK` is the name you choose for your buildpack, `PATH` is the location of your local
   Java buildpack directory, and `POSITION` is the order in which your buildpack will be selected.

6. After building your application, push it such that it uses your
   buildpack:

    ```
    $ cf push -f ./manifest.yml -b BUILDPACK
    ```

7. Bind your app as described in
   [Bind an App to a Service Instance](using-pcc.html#bind-service).

8. Restage the app to ensure proper configuration:

    ```
    $ cf restage APP-NAME
    ```
