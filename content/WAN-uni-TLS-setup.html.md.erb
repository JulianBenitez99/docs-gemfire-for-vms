---
title: Set Up a Unidirectional System with TLS
---

This section describes how to set up a unidirectional transfer, using TLS encryption,
such that all operations in cluster A are replicated in cluster B.
Two design patterns that use unidirectional replication are described in
[Blue-Green Disaster Recovery](design-patterns.html#WAN-pattern)
and [CQRS Pattern Across a WAN](design-patterns.html#CQRS-WAN-pattern).

##<a id="wan-uni-tls-assumptions"></a> Assumptions

- You have two PCF foundations, A and B, with a network connection between them.
- You wish to establish a TLS-encrypted WAN connection between a service instance on Foundation A and a service instance on Foundation B.
- The [Preparing for TLS](prepare-TLS.html) procedure has been followed for each foundation, establishing a CredHub “/services/tls_ca” certificate for each.
- The [Establishting Mutually Trusted TLS Credentials](WAN-mutual-credentials.html) procedure has been followed, establishing mutually trusted TLS credentials between Foundations A and B.

## <a id="wan-uni-tls-establish-unidirectional-connection"></a>Establish a Uni-Directional TLS Connection

1. Create a service instance, cluster A, using the Foundation A Cloud Foundry credentials.
Enable TLS by specifying the `-c` option with the argument `"tls":true`. 
If you also use the `-c` option to set the `distributed_system_id` of Foundation A, the command takes the form:

    ```
    cf create-service p-cloudcache PLAN-NAME SERVICE-INSTANCE-NAME -c '{
    "tls" : true,
    "distributed_system_id" : ID-VALUE }'
    ```

    This example sets the PLAN-NAME to "wan-cluster", the SERVICE-INSTANCE-NAME to "wan1", and the ID-VALUE to "1":

    <pre class='terminal'>
    $ cf create-service p-cloudcache wan-cluster wan1 -c '{
    "tls" : true,
    "distributed_system_id" : 1 }'
    </pre>

    Verify the completion of service creation prior to continuing
    to the next step.
    Output from the `cf services` command will show the `last operation` as
    `create succeeded` when service creation is completed.

1. Create a service key for cluster A.
The service key will contain generated credentials that this example
will use in the creation of the cluster B service instance:

    <pre class='terminal'>
    $ cf create-service-key wan1 k1
    </pre>

    The contents of the service key will differ based upon the cluster
    configuration,
    and whether an authentication and enterprise single sign-on (SSO) system
    such as LDAP has been configured.
    With the enterprise SSO,
    there will *not* be cluster operator and developer users in the
    service key.
    With enterprise SSO, the service key will *not* contain cluster operator and developer users.

    Without the enterprise SSO, the service key appears as in this example.
    Within the service key,
    each `username` is generated with a unique string
    appended so there will be unique user names for the different roles.
    The user names in this example have been modified
    to be easy to understand,
    and they are not representative of the user names that
    will be generated upon service key creation.
    Passwords generated for the service key are output in clear text.
    The passwords shown in this example have been
    modified to be easy to understand,
    and they are not representative of the passwords that
    will be generated upon service key creation.
    Here is sample output from `cf service-key wan1 k1`:

    <pre class='terminal'>
    Getting key k1 for service instance wan1 as admin...


    {
     "distributed_system_id": "1",
     "gfsh_login_string": "connect
     --url=https://cloudcache-url.com/gemfire/v1
     --user=cluster_operator_user --password=pass --skip-ssl-validation",
     "locators": [
      "id1.locator.subnet.service-instance-id.bosh[55221]",
      "id2.locator.subnet.service-instance-id.bosh[55221]",
      "id3.locator.subnet.service-instance-id.bosh[55221]"
     ],
     "remote_cluster_info": {
      "recursors": {
       "services-subnet.service-instance-id.bosh": [
        "10.0.8.6:1053",
        "10.0.8.7:1053",
        "10.0.8.5:1053"
       ]
      },
      "remote_locators": [
      "id1.locator.subnet.service-instance-id.bosh[55221]",
      "id2.locator.subnet.service-instance-id.bosh[55221]",
      "id3.locator.subnet.service-instance-id.bosh[55221]"
      ],
      "trusted_sender_credentials": [
       {
        "password": "gws-GHI-password",
        "username": "gateway_sender_GHI"
       }
      ]
     },
     "urls": {
      "gfsh": "https://cloudcache-1.example.com/gemfire/v1",
      "pulse": "https://cloudcache-1.example.com/pulse"
     },
     "users": [
      {
       "password": "cl-op-ABC-password",
       "roles": [
        "cluster_operator"
       ],
       "username": "cluster_operator_ABC"
      },
      {
       "password": "dev-DEF-password",
       "roles": [
        "developer"
       ],
       "username": "developer_DEF"
      }
     ],
     "wan": {}
    }
    </pre>

1. Communicate the Cluster A `remote_cluster_info`, which includes the recursors array, remote locators array, and
trusted sender credentials, to the Cluster B Cloud Foundry administrator. 

1.  Create the Cluster B service instance using the Foundation B Cloud Foundry information (locators, recursors, sender credentials).
You must ensure that the distributed system id of Cluster B is different than that of Cluster A. 
Use a `-c` option to enable TLS and to specify the distributed system id, the Cluster A service instance’s remote locators array, trusted sender credentials, and recursors.

    <pre class='terminal'>
    $ cf create-service p-cloudcache wan-cluster wan2 -c '
    {
      "tls":true,
      "distributed_system_id":2,
      "remote_clusters":[
        {
          "remote_locators":[
            "id1.locator.subnet.service-instance-id.bosh[55221]",
            "id2.locator.subnet.service-instance-id.bosh[55221]",
            "id3.locator.subnet.service-instance-id.bosh[55221]"
          ],
          "trusted_sender_credentials":[
            {
              "username": "gateway_sender_GHI",
              "password":"gws-GHI-password"
            }
          ],
          "recursors": {
            "services-subnet.service-instance-id.bosh": [
              "10.0.8.5:1053",
              "10.0.8.7:1053",
              "10.0.8.6:1053"
            ]
          }
        }
      ]
    }'
    </pre>

    Verify the completion of service creation prior to continuing to the next step.
    Output from the `cf services` command will show the `last operation` as
    `create succeeded` when service creation is completed.

1. Create the service key of cluster B:

    <pre class='terminal'>
    $ cf create-service-key wan2 k2
    </pre>

    The contents of the service key will differ based upon the cluster
    configuration,
    and if an authentication and enterprise single sign-on (SSO) system
    such as LDAP has been configured.
    With the enterprise SSO,
    there will *not* be cluster operator and developer users in the
    service key.
    With enterprise SSO, the service key will *not* contain cluster operator and developer users.

    Without the enterprise SSO, the service key appears as in this example.

    Note that the cluster B service key will contain unneeded (for the unidirectional setup)
    but automatically created `sender_credentials`.

    Here is sample output from `cf service-key wan2 k2`,
    which outputs details of the cluster B service key
    (as above, user names and passwords have been simplified for readability):

    <pre class='terminal'>
    Getting key k2 for service instance destination as admin...

    {
     "distributed_system_id": "2",
     "gfsh_login_string": "connect
     --url=https://cloudcache-url.com/gemfire/v1
     --user=cluster_operator_user --password=pass --skip-ssl-validation",
     "locators": [
      "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
      "id2.locator-server.subnet2.service-instance-id2.bosh[55221]",
      "id3.locator-server.subnet2.service-instance-id2.bosh[55221]"
     ],
     "remote_cluster_info": {
      "recursors": {
       "services-subnet-2.service-instance-id-2.bosh": [
        "10.1.16.7:1053",
        "10.1.16.6:1053",
        "10.1.16.8:1053"
       ]
      },
      "remote_locators": [
      "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
      "id2.locator-server.subnet2.service-instance-id2.bosh[55221]",
      "id3.locator-server.subnet2.service-instance-id2.bosh[55221]"
      ],
      "trusted_sender_credentials": [
       {
        "password": "gws-PQR-password",
        "username": "gateway_sender_PQR"
       }
      ]
     },
     "urls": {
      "gfsh": "https://cloudcache-2.example.com/gemfire/v1",
      "pulse": "https://cloudcache-2.example.com/pulse"
     },
     "users": [
      {
       "password": "cl-op-JKL-password",
       "roles": [
        "cluster_operator"
       ],
       "username": "cluster_operator_JKL"
      },
      {
       "password": "dev-MNO-password",
       "roles": [
        "developer"
       ],
       "username": "developer_MNO"
      }
     ],
     "wan": {
      "remote_clusters": [
      {
        "remote_locators": [
         "id1.locator.subnet.service-instance-id.bosh[55221]",
         "id2.locator.subnet.service-instance-id.bosh[55221]",
         "id3.locator.subnet.service-instance-id.bosh[55221]"
        ],
        "trusted_sender_credentials": [
         "gateway_sender_GHI"
        ]
       }
      ]
     }
    }
    </pre>

1. Communicate the Cluster B  `remote_cluster_info`, which includes the recursors array, remote locators array, and
trusted sender credentials, to the Cluster A Cloud Foundry administrator. 

1. Update the Cluster A service instance using the Cluster A
Cloud Foundry credentials to include the Cluster B locators:

    <pre class='terminal'>
    $ cf update-service wan1 -c '
    {
      "remote_clusters":[
      {
        "remote_locators":[
          "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
          "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
          "id1.locator-server.subnet2.service-instance-id2.bosh[55221]"],
      }]
    }'
    Updating service instance wan1 as admin
    </pre>

1. To verify that the cluster A service instance has been correctly updated,
delete and recreate the cluster A service key.
As designed, the recreated service key will have the same user identifiers
and passwords; new unique strings and passwords are not generated.
Use the Cluster A Cloud Foundry credentials
in these commands:

    <pre class='terminal'>
    $ cf delete-service-key wan1 k1
    </pre>

    <pre class='terminal'>
    $ cf create-service-key wan1 k1
    </pre>

    This example service key is shown assuming that an authentication and
    enterprise single sign-on (SSO) system such as LDAP has
    *not* been configured.
    The cluster A service key will now appear as:

    <pre class='terminal'>
    Getting key k1 for service instance wan1 as admin...

    {
     "distributed_system_id": "1",
     "locators": [
      "id1.locator.subnet.service-instance-id.bosh[55221]",
      "id2.locator.subnet.service-instance-id.bosh[55221]",
      "id3.locator.subnet.service-instance-id.bosh[55221]"
     ],
     "remote_cluster_info": {
      "recursors": {
       "services-subnet.service-instance-id.bosh": [
        "10.0.8.6:1053",
        "10.0.8.7:1053",
        "10.0.8.5:1053"
       ]
      },
      "remote_locators": [
      "id1.locator.subnet.service-instance-id.bosh[55221]",
      "id2.locator.subnet.service-instance-id.bosh[55221]",
      "id3.locator.subnet.service-instance-id.bosh[55221]"
      ],
      "trusted_sender_credentials": [
       {
        "password": "gws-GHI-password",
        "username": "gateway_sender_GHI"
       }
      ]
     },
     "urls": {
      "gfsh": "https://cloudcache-1.example.com/gemfire/v1",
      "pulse": "https://cloudcache-1.example.com/pulse"
     },
     "users": [
      {
       "password": "cl-op-ABC-password",
       "roles": [
        "cluster_operator"
       ],
       "username": "cluster_operator_ABC"
      },
      {
       "password": "dev-DEF-password",
       "roles": [
        "developer"
       ],
       "username": "developer_DEF"
      }
     ],
     "wan": {
      "remote_clusters": [
       {
        "remote_locators": [
         "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
         "id2.locator-server.subnet2.service-instance-id2.bosh[55221]",
         "id3.locator-server.subnet2.service-instance-id2.bosh[55221]"
        ],
        "trusted_sender_credentials": [
         "gateway_sender_PQR"
        ]
       }
      ]
     }
    }
    </pre>


1. Use gfsh to create the cluster A gateway sender and the region.
Any region operations that occur after the region is created on
cluster A, but before the region is created on cluster B
will be lost.
    - Connect using gfsh following the instructions in
    [Connect with gfsh over HTTPS](accessing-instance.html#gfsh-connect-https)
    with a role that is able to manage both the cluster and the data.
    - Create the cluster A gateway sender.
    The required `remote-distributed-system-id` option identifies the `distributed-system-id` of the destination cluster. It is 2 for this example:

        <pre class='terminal'>
        gfsh>create gateway-sender --id=send_to_2 --remote-distributed-system-id=2 --enable-persistence=true
        </pre>
    - Create the cluster A region.
    The `gateway-sender-id` associates region operations with a specific
    gateway sender.  The region must have an associated gateway sender in
    order to propagate region events across the WAN.

        <pre class='terminal'>
        gfsh>create region --name=regionX --gateway-sender-id=send_to_2 --type=PARTITION_REDUNDANT
        </pre>

1. Use gfsh to create the cluster B region.
    - Connect using gfsh following the instructions in
    [Connect with gfsh over HTTPS](accessing-instance.html#gfsh-connect-https)
    with a role that is able to manage both the cluster and the data.
    - Create the cluster B region:

        <pre class='terminal'>
        gfsh>create region --name=regionX --type=PARTITION_REDUNDANT
        </pre>
