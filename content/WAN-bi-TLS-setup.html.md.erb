---
title: Set Up a Bidirectional System with TLS
---

This section describes how to set up a bidirectional transfer over WAN
between two PCC instances using TLS encryption.

## Assumptions

- You have two PCF foundations, A and B, joined by a WAN connection.
- The [Preparing for TLS](prepare-TLS.html) procedure has been followed for each foundation, establishing a CredHub “/services/tls_ca” certificate for each.

## Establish Mutually Trusted Credentials

In order for services instances in two foundations to communicate with TLS, the CredHub
“/services/tls_ca” certificate must be trusted in both foundations; otherwise, WAN connections with
TLS will fail.

To be trusted in both foundations, the certificate must be:

- identical between foundations, or
- signed by the same CA that both foundations already trust.
If one of these conditions is satisfied, mutually trusted credentials are already in place. Proceed to [Establish a Bi-Directional Connection](#establish_bidirectional_connection).

If the two foundations have different “/services/tls_ca” certificates that are not already mutually trusted,
follow these steps to establish mutual trust.

Assuming you have two different PCF foundations, A and B, connected by a WAN.

1. Access the CredHub of Foundation A using instructions from [Access BOSH CredHub](rotating-ca.html#credhub)

2. Fetch the certificate from Foundation A using CredHub:

    ```
    credhub get -n /services/tls_ca -k certificate
    ```

3. Record the output.

4. Navigate to the **Ops Manager Installation Dashboard** of **Foundation B** and click the **BOSH Director** tile.

5. Click **Security**.

6. Append the contents of the new CA certificate to the old CA certificate under **Trusted Certificates**. Do not remove the old CA certificate.

7. Click **Save**.

8. Distribute the new CA certificate to your PCC VMs and regenerate each server certificate using the new CA:
   - Navigate back to the **Installation Dashboard**.
   - Click **Review Pending Changes**.
   - Click **ERRANDS**.
   - Select **Upgrade all On-demand MySQL Service Instances**.

9. Return to the **Installation Dashboard** in Ops Manager and click **Apply Changes**.


Repeat Steps 2 - 9 for Foundation B to put its services CA into Foundation A.


## <a id="establish_bidirectional_connection"></a>Establish a Bi-Directional TLS Connection

1. Create the cluster A service instance using the Foundation A Cloud Foundry credentials.
Enable TLS by specifying the `-c` option with the argument `"tls":true`. 
This example also uses the `-c` option to set the `distributed_system_id` of Foundation A:

    <pre class='terminal'>
    $ cf create-service p-cloudcache wan-cluster wan1 -c '{"tls":true,
    "distributed_system_id" : 1 }'
    </pre>

    Verify the completion of service creation prior to continuing
    to the next step.
    Output from the `cf services` command will show the `last operation` as
    `create succeeded` when service creation is completed.

1. Create a service key for cluster A.
The service key will contain generated credentials that this example
will use in the creation of the cluster B service instance:

    <pre class='terminal'>
    $ cf create-service-key wan1 k1
    </pre>

    The contents of the service key will differ based upon the cluster
    configuration,
    and whether an authentication and enterprise single sign-on (SSO) system
    such as LDAP has been configured.
    With enterprise SSO, the service key will *not* contain cluster operator and developer users.
    
    Without enterprise SSO, the service key appears as in this example.
    Within the service key,
    each `username` is generated with a unique string
    appended so there will be unique user names for the different roles.
    The user names in this example have been modified
    to be easy to understand,
    and they are not representative of the user names that
    will be generated upon service key creation.
    Passwords generated for the service key are output in clear text.
    The passwords shown in this example have been
    modified to be easy to understand,
    and they are not representative of the passwords that
    will be generated upon service key creation.
    Here is sample output from `cf service-key wan1 k1`:

    <pre class='terminal'>
    Getting key k1 for service instance wan1 as admin...

    {
     "distributed_system_id": "1",
     "gfsh_login_string": "connect
     --url=https://cloudcache-url.com/gemfire/v1
     --user=cluster_operator_user --password=pass --skip-ssl-validation",
     "locators": [
      "id1.locator.subnet.service-instance-id.bosh[55221]",
      "id2.locator.subnet.service-instance-id.bosh[55221]",
      "id3.locator.subnet.service-instance-id.bosh[55221]"
     ],
     "recursors": {
      "services-subnet.service-instance-id.bosh": [
       "10.0.8.6:1053",
       "10.0.8.5:1053",
       "10.0.8.7:1053"
      ]
     },
     "urls": {
      "gfsh": "https://cloudcache-1.example.com/gemfire/v1",
      "pulse": "https://cloudcache-1.example.com/pulse"
     },
     "users": [
      {
       "password": "cl-op-ABC-password",
       "roles": [
        "cluster_operator"
       ],
       "username": "cluster_operator_ABC"
      },
      {
       "password": "dev-DEF-password",
       "roles": [
        "developer"
       ],
       "username": "developer_DEF"
      }
     ],
     "wan": {
      "sender_credentials": {
       "active": {
        "password": "gws-GHI-password",
        "username": "gateway_sender_GHI"
       }
      }
     }
    }
    </pre>

1. Communicate the cluster A locators array, recursors array, and
`sender_credentials` to the cluster B Cloud Foundry administrator. 

1.  Create the cluster B service instance using the cluster B Cloud Foundry information (locators, recursors, sender credentials).
You must ensure that the distributed system id of cluster B is different than that of cluster A. 
Use a `-c` option to enable TLWS and to specify the distributed system id, the cluster A service instance’s locators, and the cluster A information:

    <pre class='terminal'>
    $ cf create-service p-cloudcache wan-cluster wan2 -c '
    {
      "tls":true,
      "distributed_system_id":2,
      "remote_clusters":[
        {
          "remote_locators":[
            "id1.locator.subnet.service-instance-id.bosh[55221]",
            "id2.locator.subnet.service-instance-id.bosh[55221]",
            "id3.locator.subnet.service-instance-id.bosh[55221]"
          ],
          "trusted_sender_credentials":[
            {
              "username": "gateway_sender_GHI",
              "password":"gws-GHI-password"
            }
          ],
          "recursors": {
            "services-subnet.service-instance-id.bosh": [
              "10.0.8.5:1053",
              "10.0.8.7:1053",
              "10.0.8.6:1053"
            ]
          }
        }
      ]
    }'
    </pre>

    Verify the completion of service creation prior to continuing to the next step.
    Output from the `cf services` command will show the `last operation` as
    `create succeeded` when service creation is completed.

1. Create the service key of cluster B:

    <pre class='terminal'>
    $ cf create-service-key wan2 k2
    </pre>

    The contents of the service key will differ based upon the cluster
    configuration,
    and whether an authentication and enterprise single sign-on (SSO) system
    such as LDAP has been configured.
    With enterprise SSO, the service key will *not* contain cluster operator and developer users.

    Without the enterprise SSO, the service key appears as in this example.

    Here is sample output from `cf service-key wan2 k2`,
    which outputs details of the cluster B service key 
    (as above, user names and passwords have been simplified for readability):

    <pre class='terminal'>
    Getting key k2 for service instance destination as admin...

    {
     "distributed_system_id": "2",
     "gfsh_login_string": "connect
     --url=https://cloudcache-url.com/gemfire/v1
     --user=cluster_operator_user --password=pass --skip-ssl-validation",
     "locators": [
      "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
      "id2.locator-server.subnet2.service-instance-id2.bosh[55221]",
      "id3.locator-server.subnet2.service-instance-id2.bosh[55221]"
     ],
     "recursors": {
      "services-subnet2.service-instance-id2.bosh[55221]": [
       "10.1.16.6:1053",
       "10.1.16.8:1053",
       "10.1.16.7:1053"
      ]
     },
     "urls": {
      "gfsh": "https://cloudcache-2.example.com/gemfire/v1",
      "pulse": "https://cloudcache-2.example.com/pulse"
     },
     "users": [
      {
       "password": "cl-op-JKL-password",
       "roles": [
        "cluster_operator"
       ],
       "username": "cluster_operator_JKL"
      },
      {
       "password": "dev-MNO-password",
       "roles": [
        "developer"
       ],
       "username": "developer_MNO"
      }
     ],
     "wan": {
      "remote_clusters": [
      {
        "remote_locators": [
         "id1.locator.subnet.service-instance-id.bosh[55221]",
         "id2.locator.subnet.service-instance-id.bosh[55221]",
         "id3.locator.subnet.service-instance-id.bosh[55221]"
        ],
        "trusted_sender_credentials": [
         "gateway_sender_GHI"
        ]
       }
      ],
      "sender_credentials": {
       "active": {
        "password": "gws-PQR-password",
        "username": "gateway_sender_PQR"
       }
      }
     }
    }
    </pre>

1. Communicate the cluster B locators array, recursors array, and
`sender_credentials` to the cluster A Cloud Foundry administrator. 

1. Update the cluster A service instance using the cluster A
Cloud Foundry credentials to include the cluster B locators
and the cluster B information:

    <pre class='terminal'>
    $ cf update-service wan1 -c '
    {
      "remote_clusters":[
      {
        "remote_locators":[
          "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
          "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
          "id1.locator-server.subnet2.service-instance-id2.bosh[55221]"],
        "trusted_sender_credentials":[
        {
          "username":"gateway_sender_PQR",
          "password":"gws-PQR-password"
        }]
        "recursors": {
          "services-subnet.service-instance-id.bosh": [
            "10.1.16.6:1053",
            "10.1.16.8:1053",
            "10.1.16.7:1053"
          ]
        }
      }]
    }'
    Updating service instance wan1 as admin
    </pre>

1. To verify that the cluster A service instance has been correctly updated,
delete and recreate the cluster A service key.
As designed, the recreated service key will have the same user identifiers
and passwords; new unique strings and passwords are not generated.
Use the cluster A Cloud Foundry credentials
in these commands:

    <pre class='terminal'>
    $ cf delete-service-key wan1 k1
    </pre>

    <pre class='terminal'>
    $ cf create-service-key wan1 k1
    </pre>

    This example service key is shown assuming that an authentication and
    enterprise single sign-on (SSO) system such as LDAP has
    *not* been configured.
    The cluster A service key will now appear as:

    <pre class='terminal'>
    Getting key k1 for service instance wan1 as admin...

    {
     "distributed_system_id": "1",
     "gfsh_login_string": "connect
     --url=https://cloudcache-url.com/gemfire/v1
     --user=cluster_operator_user --password=pass --skip-ssl-validation",
     "locators": [
      "id1.locator.subnet.service-instance-id.bosh[55221]",
      "id2.locator.subnet.service-instance-id.bosh[55221]",
      "id3.locator.subnet.service-instance-id.bosh[55221]"
     ],
     "recursors": {
      "subnet.service-instance-id.bosh": [
       "10.0.8.6:1053",
       "10.0.8.5:1053",
       "10.0.8.7:1053"
      ],
     },
     "urls": {
      "gfsh": "https://cloudcache-1.example.com/gemfire/v1",
      "pulse": "https://cloudcache-1.example.com/pulse"
     },
     "users": [
      {
       "password": "cl-op-ABC-password",
       "roles": [
        "cluster_operator"
       ],
       "username": "cluster_operator_ABC"
      },
      {
       "password": "dev-DEF-password",
       "roles": [
        "developer"
       ],
       "username": "developer_DEF"
      }
     ],
     "wan": {
      "remote_clusters": [
       {
        "remote_locators": [
         "id1.locator-server.subnet2.service-instance-id2.bosh[55221]",
         "id2.locator-server.subnet2.service-instance-id2.bosh[55221]",
         "id3.locator-server.subnet2.service-instance-id2.bosh[55221]"
        ],
        "trusted_sender_credentials": [
         "gateway_sender_PQR"
        ]
       }
      ],
      "sender_credentials": {
       "active": {
        "password": "gws-GHI-password",
        "username": "gateway_sender_GHI"
       }
      }
     }
    }
    </pre>


1. Use gfsh to create the cluster A gateway sender and the region.
Any region operations that occur after the region is created on
cluster A, but before the region is created on cluster B
will be lost.
    - Connect using gfsh following the instructions in
    [Connect with gfsh over HTTPS](accessing-instance.html#gfsh-connect-https)
    with a role that is able to manage both the cluster and the data.
    - Create the cluster A gateway sender.
    The required `remote-distributed-system-id` option identifies the `distributed-system-id` of the destination cluster. It is 2 for this example:

        <pre class='terminal'>
        gfsh>create gateway-sender --id=send_to_2 --remote-distributed-system-id=2 --enable-persistence=true
        </pre>
    - Create the cluster A region.
    The `gateway-sender-id` associates region operations with a specific
    gateway sender.  The region must have an associated gateway sender in
    order to propagate region events across the WAN.

        <pre class='terminal'>
        gfsh>create region --name=regionX --gateway-sender-id=send_to_2 --type=PARTITION_REDUNDANT
        </pre>

1. Use gfsh to create the cluster B gateway sender and region.
    - Connect using gfsh following the instructions in
    [Connect with gfsh over HTTPS](accessing-instance.html#gfsh-connect-https)
    with a role that is able to manage both the cluster and the data.
    - Create the cluster B gateway sender:

        <pre class='terminal'>
        gfsh>create gateway-sender --id=send_to_1 --remote-distributed-system-id=1 --enable-persistence=true
        </pre>
    - Create the cluster B region:

        <pre class='terminal'>
        gfsh>create region --name=regionX --gateway-sender-id=send_to_1 --type=PARTITION_REDUNDANT
        </pre>

## <a id=wan-bi-verify class="no_quick_link"></a>Verify Bidirectional WAN Setup

This verification uses gfsh to put a region entry into each of cluster A
and cluster B, in order to observe that the entry appears in the
other cluster.

1. Run gfsh and connect following the instructions in
[Connect with gfsh over HTTPS](accessing-instance.html#gfsh-connect-https)
with a role that is able to manage both the cluster and the data.

1. Verify that cluster A has a complete set of gateway senders and
gateway receivers:

    <pre class='terminal'>
    gfsh>list gateways
    </pre>
    
    Also verify that there are no queued events in the gateway senders.
    
1. In a separate terminal window,
run gfsh and connect following the instructions in
[Connect with gfsh over HTTPS](accessing-instance.html#gfsh-connect-https)
with a role that is able to manage both the cluster and the data.

1. Verify that cluster B has a complete set of gateway senders and
gateway receivers:

    <pre class='terminal'>
    gfsh>list gateways
    </pre>

    Also verify that there are no queued events in the gateway senders.
    
1. Use gfsh to do a put operation from the cluster A gfsh connection.
This example assumes that both the key and the value for the entry
are strings.
The gfsh `help put` command shows the put command's options. 
Here is an example:

    <pre class='terminal'>
    gfsh>put --region=regionX --key=mykey1 --value=stringvalue1
    Result      : true
    Key Class   : java.lang.String
    Key         : mykey1
    Value Class : java.lang.String
    Old Value   : null
    </pre>

1. Wait approximately 30 seconds before using the cluster B gfsh
connection to do a get of the same key that was put into the region
on cluster A.

    <pre class='terminal'>
    gfsh>get --region=regionX --key=mykey1
    Result      : true
    Key Class   : java.lang.String
    Key         : mykey1
    Value Class : java.lang.String
    Value       : "stringvalue1"
    </pre>

    You should see that cluster B has the value.

1. Repeat steps 5 and 6 to do a put operation operation on cluster B
and verify that the entry is sent to cluster A.

1. Remove both test entries from both clusters with two gfsh
commands, issuing the commands on one of the clusters.
The WAN replication will cause the removal of the test entries
on the other cluster.

    <pre class='terminal'>
    gfsh>remove --region=regionX --key=mykey1
    Result    : true
    Key Class : java.lang.String
    Key       : mykey1

    gfsh>remove --region=regionX --key=mykey2
    Result    : true
    Key Class : java.lang.String
    Key       : mykey2
    </pre>
