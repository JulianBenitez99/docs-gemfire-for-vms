---
title:  Windows/Unix/Linux—Upgrade Pivotal GemFire from a ZIP or tar.gz File
---

This is the upgrade procedure from GemFire 8.x to GemFire 9.0.0-beta.1. 

## General Upgrade Steps

These steps identify the ordering of an upgrade.

1.   Back up all existing disk-stores and data so you can restore 
your GemFire version 8 cluster if the upgrade does not complete
to your satisfaction.
  
2.   Back up all configuration files including
`geode.properties`/`gemfire.properties` 
and `.xml` configurations,
again for restoration purposes if the upgrade does not complete
to your satisfaction.

3.   Check system requirements and make changes where applicable.

4.   Shut down the cluster. For example (using `gfsh`):

    ``` pre
    gfsh>shutdown --include-locators=true
    ```
5.   Upgrade the Java JDK to v1.8.92 or later, if necessary.

6.   Install the new version of GemFire.

7.   Update environment variables to point to the new installation.

8.   Update package names in server-side callbacks
(CacheListeners, CacheWriters, Functions, Security plug-ins, etc.)
from `com.gemstone.gemfire` to `org.apache.geode`.

9.   Recompile client applications with the new package names.

10.  Recompile or update the application’s classpath to use 
`geode-dependencies.jar` (was `gemfire.jar`).

11.  Start the cluster using the new GemFire installation.

12.  Test the new installation to assure that the cluster has been
properly redeployed.

13.  Redeploy applications.

14.  Test applications for proper functionality.

15.  Remove the old distribution to prevent unexpected version conflicts.

## Java Notes

- Pivotal GemFire 9.0 requires Java SE 8, version 92 or a more recent version.
Pivotal GemFire 8.0 was the last GemFire release to support Java SE 6.
As of this writing Java SE 7 is already End-of-Life.

- To check your current Java version, type `java -version`
 at a command-line prompt. 

- The Pivotal GemFire product download does not include Java.
You must download and install a supported JRE or JDK on each system
running GemFire.
GemFire recommends the installation of a full JDK (and not just a JRE)
to obtain better performance with `gfsh status` and `gfsh stop` commands.

## RHEL/Centos: with previous installation via RPM

RPMs existed for GemFire 8.x,
but they are not available for GemFire 9.0.
To install GemFire 9.0 on a RHEL/Centos system,
follow these upgrade procedure instructions,
with a modified final step of uninstalling the GemFire 8.x version
using `rpm -e`.

## Ubuntu: with previous installation via Debian packaging

DEBs existed for GemFire 8.x,
but they are not available for GemFire 9.0.
To install GemFire 9.0 on an Ubuntu system,
follow the upgrade procedure instructions,
with a modified final step of uninstalling the GemFire 8.x version
using `dpkg --remove` or `dpkg --purge`.

## Package Renaming

Pivotal GemFire 9.0 uses open-source Geode package names,
`org.apache.geode`, in place of GemFire package names,
`com.gemstone.gemfire`.
If you have written code that explicitly imports `gemfire` packages,
you must change those references to use the `geode` names.
On the server side, such names are used in customer-written functions,
putters, and getters.
In clients, these package names often occur in exception handling.
When you upgrade to Pivotal GemFire 9.0,
you must update package names in customer-written code that will be
running on a GemFire 9.0 server:
search and replace `com.gemstone.gemfire` with `org.apache.geode`.

The Pivotal GemFire 9.0 release provides some compatibility:
A version 9 server will understand calls from a version 8 client
that uses the old package names.
However, a version 8 member or client will not understand
the new package names when called by a version 9 member or client.

## The Upgrade Procedure, Step by Step

Follow these steps to upgrade to Pivotal GemFire 9.0.0-beta.1 on Linux,
Unix, or Windows.

1.  Make backup copies of all existing disk-stores, server-side code,
configuration files, and data across the entire cluster.
To get a backup of the data that includes the most recent changes
may require that traffic across the cluster is stopped before
the backup is made.

2.  Shut down the cluster running with the prior version.
Open a `gfsh` prompt:

    ``` pre
    % gfsh
    ```

    Connect to the locator:

    ``` pre
    gfsh>connect --locator=localhost[10334]
    Connecting to Locator at [host=localhost, port=10334] ..
    Connecting to Manager at [host=172.16.139.180, port=1099] ..
    Successfully connected to: [host=172.16.139.180, port=1099]
    
    gfsh>list members
     Name   | Id
    ------- | -------------------------------------------
    server2 | 172.16.139.180(server2:29368)<v2>:35840
    locator | 172.16.139.180(locator:29181:locator):36278
    server1 | 172.16.139.180(server1:29285)<v1>:40574
    ```

    Shut down the entire cluster (by pressing Y at the prompt,
this will lose no persisted data): 

    ``` pre
    gfsh>shutdown --include-locators=true
As a lot of data in memory will be lost, including possibly events in queues,
do you really want to shutdown the entire distributed system? (Y/n): Y
succeeded in shutting down
    ```

    Since GemFire is a Java process,
to check before continuing that all GemFire members successfully stopped,
it is useful to use the JDK-included `jps` command to check running
java processes:

    ``` pre
    % jps
    29664 Jps
    ```

3.  Upgrade Java, if needed.

4.  Download the new version of GemFire (`.zip` `.tar.gz`) from
the Downloads portion of the
[Pivotal GemFire product page](http://www.pivotal.io/big-data/pivotal-gemfire).

5.  Move the compressed download to the desired installation directory,
and uncompress or expand it.
For example, to expand the compressed tar file:

    ``` pre
    % tar -xzf Pivotal_GemFire_900_Linux.tar.gz
    ```
    The file name may differ from the one shown in this example.

6.  Reset all GemFire-related environment variables to point to
the new installation. For example:

    ``` pre
    export JAVA_HOME=/usr/java/jdk1.8.0_92
    export GEMFIRE=<PATH TO INSTALL LOCATION>/Pivotal_GemFire_900_Linux
    export PATH=$JAVA_HOME/bin:$GEMFIRE/bin:$PATH
    ```
    To check that the system finds the new installation,
open a `gfsh` prompt and check the GemFire version:

    ``` pre
    % gfsh --version
    v9.0.0
    ```

7.  Repeat steps 3-6 on all machines within the cluster.

8.  Redeploy your environment's configuration files to
the new version installation.

9.  Search and replace `com.gemstone.gemfire` package names in
customer-written server-side code with `org.apache.geode`.

10. Point all client connections to the new installation of GemFire.
You may need to do one of the following tasks depending on your
application's configuration:
    - Modify your client applications to point to the new GemFire product tree location.
    - Copy the `geode-dependencies.jar` file out of the new GemFire `lib` directory to replace the existing `gemfire.jar` file in your application.

11. Restart all system members according to your usual procedures.

12. Once all systems are functioning normally and all tests are successful,
remove the old version of GemFire to reduce possibility
of version complications in the future.
If the old version of GemFire was installed with an RPM, uninstall using

    ``` pre
    rpm -e Pivotal_GemFire_XXX
    ```
where `XXX` is replaced by the GemFire version number and also corresponds to the name of the product installation directory.  As an example, the command for removing the GemFire 8.2.1 release would be

    ``` pre
    rpm -e Pivotal_GemFire_821
    ```
If the old version of GemFire was installed with DEBs, uninstall using

    ``` pre
    dpkg --remove pivotal-gemfire
    ```



