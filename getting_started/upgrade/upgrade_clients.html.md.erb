---
title:  Upgrading Clients
---

When you update your GemFire server software, you may also have to update your client applications in order to maintain
compatibility with the upgraded servers. The following diagram illustrates the relationships between recent versions of
GemFire server software and GemFire Native Client software.

<img src="../../images/Upgrade-version-compatibilities.png" class="image" />

Update the namespace to use `apache::geode::client` in place of `gemfire` for C++ clients.  Use
`Apache.Geode.Client` in place of `Gemstone.GemFire.Cache.Generic` for .NET clients.

Deprecated functions and classes are no longer present.  Update client code such that it no longer
uses any of these removed functions and classes.

Recompile and link the updated client code.

If the clients have also been upgraded to GemFire version 9.1.1 or a more recent version, the
`SecurityManager` interface is implemented, and the servers were started with the added system
property `geode.allow-internal-messages-without-credentials=true`, then all servers must again be
restarted without the extra system property after the upgraded clients are restarted.

Beginning with GemFire version 9.0, the server class path uses `geode-dependencies.jar` in place of the no longer used `gemfire.jar` and
`server-dependencies.jar`.  Change your server-side callbacks and functions to use
`org.apache.geode` packages instead of `com.gemstone.gemfire` packages.  Implement package
renaming for any client applications that are to be upgraded to a Pivotal GemFire 9 version.

## Package Renaming

Pivotal GemFire 9.x uses the same packages as open-source Apache Geode.  Pivotal GemFire 8.x did not
use the Apache Geode package naming.  All `com.gemstone.gemfire` package names are now
`org.apache.geode`.  If you have written code that explicitly imports `gemfire` packages, you must
change those references to use the `geode` names.

The Pivotal GemFire 9.x release is backwards compatible with Pivotal GemFire 8.2.3 and more recent
8.2 clients, so a version 9 server will understand calls from an 8.2.3 client that uses the old
`com.gemstone.gemfire` package names. There is one exception: Pivotal GemFire 8.x clients that run
functions on servers using the `Execution` interface's `execute(Function function)` signature cannot
work with GemFire 9.x servers.  Clients that run functions with this signature must be reimplemented
as 9.x clients that use the 9.x package names.

