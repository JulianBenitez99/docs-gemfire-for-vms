---
title:  SSL Sample Implementation
---

A simple example demonstrates the configuration and startup of <span class="keyword">GemFire</span> system components with SSL.

<a id="ssl_example__section_A8817FA8EF654CFB862F2375C0DD6770"></a>
## Provider-Specific Configuration File

This example uses a keystore created by the Java `keytool` application to provide the proper credentials to the provider. To create the keystore, we ran the following:

``` pre
keytool -genkey \ 
-alias self \ 
-dname "CN=trusted" \ 
-validity 3650 \ 
-keypass password \ 
-keystore ./trusted.keystore \ 
-storepass password \ 
-storetype JKS 
```

This creates a `./trusted.keystore` file to be used later.

<a id="ssl_example__section_4D54B2E9045C4E34AE6DFFBECDED9271"></a>

## gemfire.properties File

You can enable SSL in the `gemfire.properties` file. In this example, SSL is enabled for all peer-to-peer, client/server, and HTTP connections. However, the `jmx-manager-ssl=false` override is added to disable SSL For JMX conenctiosn:

``` pre
cluster-ssl-enabled=true
mcast-port=0
locators=<hostaddress>[<port>]
jmx-manager-ssl-enabled=false
```

<a id="ssl_example__section_7B8E0BBF4A4C4B9FB9BC34AC1CDD4D3E"></a>

## gfsecurity.properties File

You can specify the provider-specific settings in `gfsecurity.properties` file, which can then be secured by restricting access to this file. The following example configures the default JSSE provider settings included with the JDK.

``` pre
cluster-ssl-keystore-type=jks
cluster-ssl-keystore=/path/to/trusted.keystore
cluster-ssl-keystore-password=password
cluster-ssl-truststore=/path/to/trusted.keystore
cluster-ssl-truststore-password=
security-username=xxxx
security-userPassword=yyyy 
```

Note that individual provider settings can also be overriden for client/server, JMX, or HTTP connections by setting the appropriate property here. See [Configuring SSL](implementing_ssl.html).

<a id="ssl_example__section_32E55F2088804667BB448DB577AC2940"></a>

## Locator Startup

Before starting other system members, we started the locator with the SSL and provider-specific configuration settings. After properly configuring `gemfire.properties` and `gfsecurity.properties`, start the locator and provide the location of the properties files. If any of the password fields are left empty, you will be prompted to enter a password.

``` pre
gfsh>start locator --name=my_locator --port=12345 \
--properties-file=/path/to/your/gemfire.properties \
--security-properties-file=/path/to/your/gfsecurity.properties
```

<a id="ssl_example__section_8FCC32091E97422BA45AA76C82D8294D"></a>

## Other Member Startup

Applications and cache servers can be started similarly to the locator startup, with the appropriate `gemfire.properties` file and `gfsecurity.properties` files placed in the current working directory. You can also pass in the location of both files as system properties on the command line. For example:

``` pre
gfsh>start server --name=my_server \
--properties-file=/path/to/your/gemfire.properties \
--security-properties-file=/path/to/your/gfsecurity.properties
```
