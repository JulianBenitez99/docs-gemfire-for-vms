---
title:  Authentication
---

A distributed system using authentication bars malicious peers or clients, and deters inadvertent access to its cache.

-   **[How Authentication Works](../../../latest/managing/security/how_authentication_works.html)**

    Joining members provide credentials to existing members who check the credentials and either reject the joining member or approve it.

-   **[Implementing Authentication](../../../latest/managing/security/implementing_authentication.html)**

    <span class="keyword">Pivotal GemFire</span> provides a flexible framework for your security authentication plug-ins. You choose the method of authentication, such as LDAP or PKCS, and program the plug-ins accordingly.

-   **[Setting Up JMX Authentication for GemFire Management and Monitoring](../../../latest/managing/security/management_system_jmx_authentication.html)**

    To force JMX clients such as `gfsh` and <span class="keyword">GemFire</span> Pulse to authenticate into the <span class="keyword">GemFire</span> management system, you must configure the JMX Manager node.

-   **[Encrypting Passwords for Use in cache.xml](../../../latest/managing/security/encrypting_passwords.html)**

    <span class="keyword">Pivotal GemFire</span> provides a gfsh utility to generate encrypted passwords.

-   **[Encrypt Credentials with Diffie-Hellman](../../../latest/managing/security/encrypting_with_diffie_helman.html)**

    For secure transmission of sensitive information, like passwords, you can encrypt credentials using the Diffie-Hellman key exchange algorithm.

-   **[Authentication Examples](../../../managing/security/authentication_examples.html)**

    This topic discusses the concepts and configurations for sample LDAP and PKCS implementations. Descriptions of their interfaces, classes and methods are available in the online API documentation.


