---
title:  Serializing Data with PDX Serialization
---

PDX is a cross-language data format that can reduce the cost of distributing and serializing your objects. PDX stores data in named fields that you can access individually to avoid the cost of deserializing the entire data object. When you use PDX serialization with the native client C++ API, you can register a PdxSerializer for the entire cache, implement PDX serialization for each domain object or use automatic PDX serialization by running the `pdxautoserializer` tool.

You can also set the object preference of the cache to the PdxInstance type, which allows you to access fields of a PDX object without deserializing the entire object.

When using the native client C++ API, you can opt to use PDX autoserialization. The <span class="keyword">Geode</span> native client provides a command line tool called `pdxautoserializer` that will automatically generate C++ code that will PDX serialize the class you want to serialize.

-   **[Serialize Your Domain Objects with PdxSerializer and PdxWrapper](../../nativeclient/cpp-caching-api/using_pdxserializer.html)**

    For domain objects that you cannot or do not want to modify, use the `PdxSerializer` and the `PdxWrapper` classes to serialize and deserialize the object's fields.

-   **[Serialize Using the PdxSerializable Class](../../nativeclient/cpp-caching-api/pdxserializable_interface.html)**

    Domain classes need to inherit the `PdxSerializable` abstract class to serialize and de-serialize the object. When you write objects using PDX serialization, they are distributed to the server tier in PDX serialized form.

-   **[Using Automatic PDX Serialization](../../nativeclient/cpp-caching-api/pdx_auto_serialization.html)**

    You can allow your native client C++ applications to automatically PDX serialize and deserialize domain objects without having to add any extra code by using the `pdxautoserializer` command line tool provided with the native client.

-   **[Programming Your Application to Use PdxInstances](../../nativeclient/cpp-caching-api/using_pdxinstance.html)**

    A `PdxInstance` is a lightweight wrapper around the raw bytes of the PDX serialized objects kept in the cache. It provides applications with run-time access to files of a PDX serialized object. <span class="keyword">Geode</span> provides the implementation of the `PdxInstance` class.

-   **[Configuring PDX to Ignore Unread Fields During Deserialization](../../nativeclient/cpp-caching-api/pdx_ignore_unread_fields.html)**

    Use the `setPdxIgnoreUnreadFields` API to control whether PDX ignores fields that were unread during deserialization.

-   **[Using PdxInstanceFactory to Create PdxInstances](../../nativeclient/cpp-caching-api/using_pdxinstancefactory.html)**

    You can use the `PdxInstanceFactory` API to create a `PdxInstance` from raw data when the domain class in not available on the server.

-   **[Using C++ Enum Type with PDX Serialization](../../nativeclient/cpp-caching-api/using_enum_type_with_pdx.html)**

    Because there is no "object" base type in C++, enums cannot be directly passed as a parameter to the `writeObject` and `readObject` API.

-   **[Using PDX Serialization with Delta Propagation](../../nativeclient/cpp-caching-api/pdx_with_delta_propagation.html)**

    To use delta propagation with PDX serialization, you must implement the `Delta` interface methods.


