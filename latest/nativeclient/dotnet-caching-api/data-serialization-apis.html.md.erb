---
title:  Data Serialization APIs
---

Use either `IPdxSerializable` or `IGFSerializable` for each region. Do not mix the two.

For more information on these options, see [Data Serialization](dotnet-data-serialization.html#concept_28A7797A0342447ABF6A5014E0DCB05F).

-   **IPdxSerializable interface**. Provides a flexible way to serialize your domain objects for cache storage and transfer to the servers. This is a <span class="keyword">Geode</span> built-in serialization framework. See [Data Serialization](dotnet-data-serialization.html#concept_28A7797A0342447ABF6A5014E0DCB05F).
-   **IPdxReader**. Supplies operations for reading data from <span class="keyword">Geode</span> IPDXSerializable types.
-   **IPdxWriter**. Provides operations for writing data into <span class="keyword">Geode</span> IPDXSerializable types.
-   **IPdxInstance**. Instance of a PDX serialized object that you can use to access the objectâ€™s data without having to deserialize the object first.
-   **IPdxInstanceFactory**. Allows you to build an IPdxInstance using raw data.
-   **IPdxTypeMapper interface**. Allows you to map .NET type names to Java type names when using PDX serialization.
-   **IGFSerializable interface**. Superclass of one set of user objects that can be serialized and stored in the cache. These are <span class="keyword">Geode</span> built-in serializable types. See [Data Serialization](dotnet-data-serialization.html#concept_28A7797A0342447ABF6A5014E0DCB05F).
-   **Serializable class**. Wraps the native C++ `gemfire::Serializable` objects as managed `IGFSerializable` objects. Whenever native C++ clients and .NET clients interoperate and are part of the same distributed system, the user-defined types that are put by the native C++ clients that have not been defined in .NET are returned as objects of this class.

    The API contains overloads for most Region methods and other methods that take `Serializable` as a value and that are more optimized than the more generic `IGFSerializable` overloads. The application prefers using these overloads whenever the base class of an object is `Serializable`.

-   **DataInput**. Supplies operations for reading primitive data values and user-defined objects from a byte stream.
-   **DataOutput**. Provides operations for writing primitive data values and user-defined objects implementing `IGFSerializable` to an integer.


