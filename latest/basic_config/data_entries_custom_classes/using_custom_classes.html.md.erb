---
title:  Requirements for Using Custom Classes in Data Caching
---

Follow these guidelines to use custom domain classes for your cached entry keys and values.

<a id="using_custom_classes__section_F098CAC546164094BE6872BF0C443A71"></a>
## CLASSPATH

Each memberâ€™s `CLASSPATH` must include classes for all objects the member accesses.

-   For Java applications, use the standard Java `CLASSPATH`.
-   For the cache server process, use the `CLASSPATH` environment variable or the `gfsh                             start server`'s `--classpath` parameter. See [Running Geode Server Processes](../../configuring/running/running_the_cacheserver.html).

Data is sent between clients and servers in serialized form and the server stores client data in serialized form. The server does not need to deserialize data to send it to another client or to access it through a `PDXInstance`, but it does need to deserialize it to access it in other ways. The server `CLASSPATH` must include the classes for:

-   All entry keys
-   Entry values in regions that the server persists to disk
-   Entry values the server accesses for any reason other than access using a `PdxInstance` or transfer of the full entry value to a client

For information on `PdxInstance`s, see [Data Serialization](../../developing/data_serialization/chapter_overview.html#data_serialization).

<a id="using_custom_classes__section_57EB5D02C06947B4BDE75A49286D581D"></a>

## Data Serialization

<span class="keyword">Geode</span> serializes data entry keys and values for distribution, so all data that <span class="keyword">Geode</span> moves out of the local cache for any reason must be serializable. Additionally, partitioned regions store data in serialized form. Almost every configuration requires serialization.

For information on the requirements and options for data serialization, see [Data Serialization](../../developing/data_serialization/chapter_overview.html#data_serialization).

<a id="using_custom_classes__section_CE776B94EDCB4D269A71C3C9CFEDD5FD"></a>

## Classes Used as Keys

The region uses hashing on keys. If you define a custom class to use as a key, for the class, override:

-   `equals`
-   `hashCode`. The default `hashCode` inherited from `Object` uses identity, which is different in every system member. In partitioned regions, hashing based on identity puts data in the wrong place. For details, see the Java API documentation for `java.lang.Object`.

