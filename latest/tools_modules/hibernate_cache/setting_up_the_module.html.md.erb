---
title:  Setting Up the <span class="keyword">GemFire</span> Hibernate Cache Module
---

Edit the `hibernate.cfg.xml` file to use the Hibernate Cache module.

1.  **Turn on L2 Cache**

    In the `hibernate.cfg.xml` file, turn on the L2 cache and identify the <span class="keyword">GemFire</span> locator(s):

    ``` pre
    <property name="hibernate.cache.use_second_level_cache">true</property>
    <property name="gemfire.locators">host1[port1],host2[port2]</property>
    ```

    Change `host1` and `host2 ` to the hostnames (or IP addresses) for each of the locators; `port1` and `port2                     `are the ports for each of the locators.

2.  **Set Region Factory or Cache Provider**

    Associate the region factory class with GemFireRegionFactory:

    ``` pre
    <property name="hibernate.cache.region.factory_class">
      com.gemstone.gemfire.modules.hibernate.GemFireRegionFactory
    </property> 
    ```

3.  **Determine Cache Usage Mode**

    Determine the cache usage mode for the entities in each region. There are four types of usage modes:

    | Mode                   | Description                                                                                                                                                     |
    |------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | `read-only`            | This mode is used when you do not plan on modifying the data already stored in your persistent storage.                                                         |
    | `read-write`           | This mode is used when you plan to both read from and write to your data.                                                                                       |
    | `nonstrict-read-write` | This mode is a special read/write mode that has faster write performance; however, only use this mode if no more than one client will update content at a time. |
    | `transactional`        | This mode allows for transaction-based data access.                                                                                                             |

4.  **Set Cache Usage Mode**

    The usage mode can either be set using the hibernate-mapping file or through Java annotations.

    -   To set the mode with the hibernate-mapping file, refer to this example:

        ``` pre
            
            <hibernate-mapping package="PACKAGE">
              <class name="ENTITY_NAME" ...>
                <cache usage="USAGE_MODE"/>
                ...
              </class>
            </hibernate-mapping>
         
        ```

        In this example, `PACKAGE` is the name of the entity package, `ENTITY_NAME` is the name of your entity, and `USAGE_MODE` is the chosen usage mode from the table given above. Refer to the [Hibernate documentation](http://hibernate.org/docs) for further information.

    -   To set the mode using annotations, your class definition should look something like this example which specifies the `read-only` usage mode:

        ``` pre
        import org.hibernate.annotations.Cache; 
        import org.hibernate.annotations.CacheConcurrencyStrategy; 

        @Entity 
        @Cacheable
        @Cache(
           region = 'REGION_NAME',
           usage = CacheConcurrencyStrategy.READ_ONLY
        )

        public class MyClass implements Serializable { ... }
        ```

5.  **Start a Locator**

    ``` pre
    $ gfsh start locator â€“-name=locator1
    ```

6.  **Start Hibernate**

    You are now ready to build, deploy, and run your Hibernate application, which will also launch <span class="keyword">GemFire</span>. See the [Hibernate website documentation](http://hibernate.org/docs) for further information about performing these actions.

7.  **Verify that <span class="keyword">GemFire</span> Started Successfully**

    Similar to Hibernate, <span class="keyword">GemFire</span> uses Simple Logging Facade for Java (SLF4J) to log messages. Upon successful startup, <span class="keyword">GemFire</span> will log the following message:

    ``` pre
    2010-11-15 INFO [com.gemstone.gemfire.modules.hibernate.GemFireRegionFactory] - 
        <Initializing Apache Geode Modules Version 1.1>
    ```

    SLF4J can send this and other <span class="keyword">GemFire</span> log messages to several logging frameworks. Refer to the [SLF4J](http://www.slf4j.org/) website for additional information.


