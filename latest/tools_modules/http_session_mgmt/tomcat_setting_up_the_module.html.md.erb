---
title:  Setting Up the HTTP Module for Tomcat
---

To use the <span class="keyword">Geode</span> HTTP module with Tomcat application servers, you will need to modify Tomcat's `server.xml` and `context.xml` files.

Configuration is slightly different depending on the topology you are setting up. Refer to [Common Topologies for HTTP Session Management](common_gemfire_topologies.html#common_gemfire_topologies) for more information.

<a id="tomcat_setting_up_the_module__section_20294A39368D4402AEFB3D074E8D5887"></a>
## Peer-to-Peer Setup

<img src="../../images_svg/http_module_p2p_with_locator.svg" id="tomcat_setting_up_the_module__image_bsm_2gf_sv" class="image" />
To run <span class="keyword">Geode</span> in a peer-to-peer configuration, add the following line to Tomcat's `$CATALINA_HOME$/conf/server.xml` within the `<Server>` tag:

``` pre
<Listener className="com.gemstone.gemfire.modules.session.catalina.
                         PeerToPeerCacheLifecycleListener"
        locators="localhost[10334]" />
```

Depending on the version of Tomcat you are using, add one of the following lines to `$CATALINA_HOME$/conf/context.xml` within the `<Context>` tag:

For Tomcat 6.0:

``` pre
<Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat6DeltaSessionManager"/> 
```

For Tomcat 7.0 and above:

``` pre
<Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat7DeltaSessionManager"/> 
```

<a id="tomcat_setting_up_the_module__section_B0CEBE93564540DBA165E0F7A10FDC0B"></a>

## Client/Server Setup

<img src="../../images_svg/http_module_cs_with_locator.svg" id="tomcat_setting_up_the_module__image_aqn_jjf_sv" class="image" />

To run <span class="keyword">Geode</span> in a client/server configuration, the application server will operate as a <span class="keyword">Geode</span> client. To do this, add the following line to `$CATALINA_HOME$/conf/server.xml` within the `<Server>` tag:

``` pre
<Listener className="com.gemstone.gemfire.modules.session.catalina.
                         ClientServerCacheLifecycleListener"/>
```

Depending on the version of Tomcat you are using, add one of the following lines to `$CATALINA_HOME$/conf/context.xml` within the `<Context>` tag:

For Tomcat 6.0:

``` pre
<Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat6DeltaSessionManager"/> 
```

For Tomcat 7.0 and above:

``` pre
<Manager className="com.gemstone.gemfire.modules.session.catalina.
                         Tomcat7DeltaSessionManager"/> 
```

The application server operates as a <span class="keyword">Geode</span> client in this configuration. With a similar environment to this example that is for a client/server set up,

``` pre
TC_VER=tomcat-8.0.30.C.RELEASE
INSTANCE=geode-cs
CLASSPATH=$PWD/$INSTANCE/lib/geode-modules-1.0.0-incubating.M2-SNAPSHOT.jar:\
$PWD/$INSTANCE/lib/geode-modules-tomcat7-1.0.0-incubating.M2-SNAPSHOT.jar:\
$PWD/$TC_VER/lib/servlet-api.jar:\
$PWD/$TC_VER/lib/catalina.jar:\
$PWD/$TC_VER/lib/tomcat-util.jar:\
$PWD/$TC_VER/bin/tomcat-juli.jar
```

start the server using `gfsh`:

``` pre
$ gfsh start server --name=server1 --locators=localhost[10334] --server-port=0 \
  --classpath=$CLASSPATH
```

<a id="tomcat_setting_up_the_module__section_2B97047AB30A4C549D91AD258657FBA6"></a>

## Starting the Application Server

Once you've updated the configuration, you are now ready to start your tc Server or Tomcat instance. Refer to your application server documentation for starting the application server. Once started, <span class="keyword">Geode</span> will automatically launch within the application server process.

**Note:**
<span class="keyword">Geode</span> session state management provides its own clustering functionality. If you are using <span class="keyword">Geode</span>, you should NOT turn on Tomcat clustering as well.

<a id="tomcat_setting_up_the_module__section_3E186713737E4D5383E23B41CDFED59B"></a>

## Verifying that <span class="keyword">Geode</span> Started

You can verify that <span class="keyword">Geode</span> has successfully started by inspecting the Tomcat log file. For example:

``` pre
Nov 8, 2010 12:12:12 PM
com.gemstone.gemfire.modules.session.catalina.ClientServerCacheLifecycleListener
createOrRetrieveCache
INFO: Created GemFireCache[id = 2066231378; isClosing = false; 
   created = Mon Nov 08 12:12:12 PDT 2010; server = false; 
   copyOnRead = false; lockLease = 120; lockTimeout = 60]
```

Information is also logged within the <span class="keyword">Geode</span> log file, which by default is named `gemfire_modules.log`.
